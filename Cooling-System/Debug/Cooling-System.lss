
Cooling-System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fe2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00002fe2  00003076  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800088  00800088  0000309e  2**0
                  ALLOC
  3 .stab         00002ca0  00000000  00000000  000030a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000142c  00000000  00000000  00005d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000716c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000072ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000741c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009065  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ad00  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ae60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b0ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_1>
       8:	0c 94 32 09 	jmp	0x1264	; 0x1264 <__vector_2>
       c:	0c 94 68 09 	jmp	0x12d0	; 0x12d0 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__vector_7>
      20:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__vector_8>
      24:	0c 94 a6 06 	jmp	0xd4c	; 0xd4c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 77 10 	jmp	0x20ee	; 0x20ee <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ee       	ldi	r30, 0xE2	; 226
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <main>
      8a:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b8 17 	jmp	0x2f70	; 0x2f70 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d4 17 	jmp	0x2fa8	; 0x2fa8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER1_voidInit>:
u16 Global_u16CompareMatchValue_1B = 0 ;



void TIMER1_voidInit (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
          SET_BIT(TCCR1A_REG,TCCR1A_WGM10);
        CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
		  SET_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
          SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    #elif (MODE == FAST_PWM_ICR1)
        CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     b4e:	af e4       	ldi	r26, 0x4F	; 79
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ef e4       	ldi	r30, 0x4F	; 79
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8e 7f       	andi	r24, 0xFE	; 254
     b5a:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
     b5c:	af e4       	ldi	r26, 0x4F	; 79
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ef e4       	ldi	r30, 0x4F	; 79
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	82 60       	ori	r24, 0x02	; 2
     b68:	8c 93       	st	X, r24
		  SET_BIT(TCCR1B_REG,TCCR1B_WGM12);                 
     b6a:	ae e4       	ldi	r26, 0x4E	; 78
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ee e4       	ldi	r30, 0x4E	; 78
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
     b78:	ae e4       	ldi	r26, 0x4E	; 78
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ee e4       	ldi	r30, 0x4E	; 78
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	8c 93       	st	X, r24
/*          OC1A Mode Selection                 */
    #if (OC1A_MODE == DISCONNECTED)
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    #elif ((OC1A_MODE == SETonTOP_CLEARonCOMPARE) || (OC1A_MODE == SETonCOMPdownCounting_CLEARonCOMPupCounting))
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
     b86:	af e4       	ldi	r26, 0x4F	; 79
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	ef e4       	ldi	r30, 0x4F	; 79
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 7b       	andi	r24, 0xBF	; 191
     b92:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
     b94:	af e4       	ldi	r26, 0x4F	; 79
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ef e4       	ldi	r30, 0x4F	; 79
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24

    #if (OC1B_MODE == DISCONNECTED)
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    #elif ((OC1B_MODE == SETonTOP_CLEARonCOMPARE) || (OC1B_MODE == SETonCOMPdownCounting_CLEARonCOMPupCounting))
        CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
     ba2:	af e4       	ldi	r26, 0x4F	; 79
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	ef e4       	ldi	r30, 0x4F	; 79
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8f 7e       	andi	r24, 0xEF	; 239
     bae:	8c 93       	st	X, r24
          SET_BIT(TCCR1A_REG,TCCR1A_COM1B1);
     bb0:	af e4       	ldi	r26, 0x4F	; 79
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ef e4       	ldi	r30, 0x4F	; 79
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 62       	ori	r24, 0x20	; 32
     bbc:	8c 93       	st	X, r24

    #endif


/*     TIMER1 Prescaller Selection      */
    TCCR1B_REG = ( TCCR1B_REG & 0b11111000 );              // Clear Prescaller 
     bbe:	ae e4       	ldi	r26, 0x4E	; 78
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ee e4       	ldi	r30, 0x4E	; 78
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	88 7f       	andi	r24, 0xF8	; 248
     bca:	8c 93       	st	X, r24
    #elif ( PRESCALER == NOT_USE_PRESCALER )
          SET_BIT(TCCR1B_REG,TCCR1B_CS10);
        CLR_BIT(TCCR1B_REG,TCCR1B_CS11);
        CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_8 )
        CLR_BIT(TCCR1B_REG,TCCR1B_CS10);
     bcc:	ae e4       	ldi	r26, 0x4E	; 78
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ee e4       	ldi	r30, 0x4E	; 78
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8e 7f       	andi	r24, 0xFE	; 254
     bd8:	8c 93       	st	X, r24
          SET_BIT(TCCR1B_REG,TCCR1B_CS11);
     bda:	ae e4       	ldi	r26, 0x4E	; 78
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ee e4       	ldi	r30, 0x4E	; 78
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	82 60       	ori	r24, 0x02	; 2
     be6:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
     be8:	ae e4       	ldi	r26, 0x4E	; 78
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ee e4       	ldi	r30, 0x4E	; 78
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	8b 7f       	andi	r24, 0xFB	; 251
     bf4:	8c 93       	st	X, r24
        SET_BIT(TCCR1B_REG,TCCR1B_CS12);
    #else
        #error  Wrong selection of Prescaller mode
    #endif

}
     bf6:	cf 91       	pop	r28
     bf8:	df 91       	pop	r29
     bfa:	08 95       	ret

00000bfc <TIMER1_voidSetCallBack_OVF>:

void TIMER1_voidSetCallBack_OVF (void (*Local_PointerToFunction_OVF) (void))
{
     bfc:	df 93       	push	r29
     bfe:	cf 93       	push	r28
     c00:	00 d0       	rcall	.+0      	; 0xc02 <TIMER1_voidSetCallBack_OVF+0x6>
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	9a 83       	std	Y+2, r25	; 0x02
     c08:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_OVF_T1 = Local_PointerToFunction_OVF ;
     c0a:	89 81       	ldd	r24, Y+1	; 0x01
     c0c:	9a 81       	ldd	r25, Y+2	; 0x02
     c0e:	90 93 89 00 	sts	0x0089, r25
     c12:	80 93 88 00 	sts	0x0088, r24
}
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	cf 91       	pop	r28
     c1c:	df 91       	pop	r29
     c1e:	08 95       	ret

00000c20 <TIMER1_voidSetCallBack_CTC_A>:


void TIMER1_voidSetCallBack_CTC_A (void (*Local_PointerToFunction_CTC) (void))
{
     c20:	df 93       	push	r29
     c22:	cf 93       	push	r28
     c24:	00 d0       	rcall	.+0      	; 0xc26 <TIMER1_voidSetCallBack_CTC_A+0x6>
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
     c2a:	9a 83       	std	Y+2, r25	; 0x02
     c2c:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_CTC_TA = Local_PointerToFunction_CTC ;
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	9a 81       	ldd	r25, Y+2	; 0x02
     c32:	90 93 8b 00 	sts	0x008B, r25
     c36:	80 93 8a 00 	sts	0x008A, r24
}
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <TIMER1_voidSetCallBack_CTC_B>:


void TIMER1_voidSetCallBack_CTC_B (void (*Local_PointerToFunction_CTC) (void))
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	00 d0       	rcall	.+0      	; 0xc4a <TIMER1_voidSetCallBack_CTC_B+0x6>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	89 83       	std	Y+1, r24	; 0x01
    Global_PointerToFunction_CTC_TB = Local_PointerToFunction_CTC ;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	9a 81       	ldd	r25, Y+2	; 0x02
     c56:	90 93 8d 00 	sts	0x008D, r25
     c5a:	80 93 8c 00 	sts	0x008C, r24
}
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <TIMER1_voidSetPreloadValue>:



void TIMER1_voidSetPreloadValue ( u16 Local_u16PreloadValue )
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	00 d0       	rcall	.+0      	; 0xc6e <TIMER1_voidSetPreloadValue+0x6>
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	9a 83       	std	Y+2, r25	; 0x02
     c74:	89 83       	std	Y+1, r24	; 0x01
        TCNT1_REG = Local_u16PreloadValue ;
        Global_u16PreloadValue = Local_u16PreloadValue ;
    #else
        // No Action
    #endif
}
     c76:	0f 90       	pop	r0
     c78:	0f 90       	pop	r0
     c7a:	cf 91       	pop	r28
     c7c:	df 91       	pop	r29
     c7e:	08 95       	ret

00000c80 <TIMER1_voidSetCompareMatchValue_T1A>:


void TIMER1_voidSetCompareMatchValue_T1A ( u16 Local_u16CompareMatchValue )
{
     c80:	df 93       	push	r29
     c82:	cf 93       	push	r28
     c84:	00 d0       	rcall	.+0      	; 0xc86 <TIMER1_voidSetCompareMatchValue_T1A+0x6>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE != NORMAL_OVF)
        OCR1A_REG = Local_u16CompareMatchValue ;
     c8e:	ea e4       	ldi	r30, 0x4A	; 74
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	91 83       	std	Z+1, r25	; 0x01
     c98:	80 83       	st	Z, r24
        Global_u16CompareMatchValue_1A = Local_u16CompareMatchValue ;
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	90 93 91 00 	sts	0x0091, r25
     ca2:	80 93 90 00 	sts	0x0090, r24
    #endif
}
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	cf 91       	pop	r28
     cac:	df 91       	pop	r29
     cae:	08 95       	ret

00000cb0 <TIMER1_voidSetCompareMatchValue_T1B>:

void TIMER1_voidSetCompareMatchValue_T1B ( u16 Local_u16CompareMatchValue )
{
     cb0:	df 93       	push	r29
     cb2:	cf 93       	push	r28
     cb4:	00 d0       	rcall	.+0      	; 0xcb6 <TIMER1_voidSetCompareMatchValue_T1B+0x6>
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
     cba:	9a 83       	std	Y+2, r25	; 0x02
     cbc:	89 83       	std	Y+1, r24	; 0x01
    #if (MODE != NORMAL_OVF)
        OCR1B_REG = Local_u16CompareMatchValue ;
     cbe:	e8 e4       	ldi	r30, 0x48	; 72
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	91 83       	std	Z+1, r25	; 0x01
     cc8:	80 83       	st	Z, r24
        Global_u16CompareMatchValue_1B = Local_u16CompareMatchValue ;
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	90 93 93 00 	sts	0x0093, r25
     cd2:	80 93 92 00 	sts	0x0092, r24
    #endif
}
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	cf 91       	pop	r28
     cdc:	df 91       	pop	r29
     cde:	08 95       	ret

00000ce0 <TIMER1_void_u16PWM_T1A>:


void TIMER1_void_u16PWM_T1A ( u16 Copy_u16CompareMatchValue , u16 Copy_u16TopValue )
{
     ce0:	df 93       	push	r29
     ce2:	cf 93       	push	r28
     ce4:	00 d0       	rcall	.+0      	; 0xce6 <TIMER1_void_u16PWM_T1A+0x6>
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <TIMER1_void_u16PWM_T1A+0x8>
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	9a 83       	std	Y+2, r25	; 0x02
     cee:	89 83       	std	Y+1, r24	; 0x01
     cf0:	7c 83       	std	Y+4, r23	; 0x04
     cf2:	6b 83       	std	Y+3, r22	; 0x03
    TIMER1_voidSetCompareMatchValue_T1A ( Copy_u16CompareMatchValue );
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	0e 94 40 06 	call	0xc80	; 0xc80 <TIMER1_voidSetCompareMatchValue_T1A>
    ICR1_REG = Copy_u16TopValue ;
     cfc:	e6 e4       	ldi	r30, 0x46	; 70
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	8b 81       	ldd	r24, Y+3	; 0x03
     d02:	9c 81       	ldd	r25, Y+4	; 0x04
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	80 83       	st	Z, r24
}
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <TIMER1_void_u16PWM_T1B>:


void TIMER1_void_u16PWM_T1B ( u16 Copy_u16CompareMatchValue , u16 Copy_u16TopValue )
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <TIMER1_void_u16PWM_T1B+0x6>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <TIMER1_void_u16PWM_T1B+0x8>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	9a 83       	std	Y+2, r25	; 0x02
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	7c 83       	std	Y+4, r23	; 0x04
     d28:	6b 83       	std	Y+3, r22	; 0x03
    TIMER1_voidSetCompareMatchValue_T1B ( Copy_u16CompareMatchValue );
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	0e 94 58 06 	call	0xcb0	; 0xcb0 <TIMER1_voidSetCompareMatchValue_T1B>
    ICR1_REG = Copy_u16TopValue ;
     d32:	e6 e4       	ldi	r30, 0x46	; 70
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	8b 81       	ldd	r24, Y+3	; 0x03
     d38:	9c 81       	ldd	r25, Y+4	; 0x04
     d3a:	91 83       	std	Z+1, r25	; 0x01
     d3c:	80 83       	st	Z, r24
}
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <__vector_9>:


/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)      __attribute__((signal)) ;
void __vector_9 (void)
{
     d4c:	1f 92       	push	r1
     d4e:	0f 92       	push	r0
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	0f 92       	push	r0
     d54:	11 24       	eor	r1, r1
     d56:	2f 93       	push	r18
     d58:	3f 93       	push	r19
     d5a:	4f 93       	push	r20
     d5c:	5f 93       	push	r21
     d5e:	6f 93       	push	r22
     d60:	7f 93       	push	r23
     d62:	8f 93       	push	r24
     d64:	9f 93       	push	r25
     d66:	af 93       	push	r26
     d68:	bf 93       	push	r27
     d6a:	ef 93       	push	r30
     d6c:	ff 93       	push	r31
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
    if (Global_PointerToFunction_OVF_T1 != NULL)
     d76:	80 91 88 00 	lds	r24, 0x0088
     d7a:	90 91 89 00 	lds	r25, 0x0089
     d7e:	00 97       	sbiw	r24, 0x00	; 0
     d80:	29 f0       	breq	.+10     	; 0xd8c <__vector_9+0x40>
    {
    	Global_PointerToFunction_OVF_T1() ;
     d82:	e0 91 88 00 	lds	r30, 0x0088
     d86:	f0 91 89 00 	lds	r31, 0x0089
     d8a:	09 95       	icall
    }
}
     d8c:	cf 91       	pop	r28
     d8e:	df 91       	pop	r29
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	0f be       	out	0x3f, r0	; 63
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)      __attribute__((signal)) ;
void __vector_8 (void)
{
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	2f 93       	push	r18
     dbe:	3f 93       	push	r19
     dc0:	4f 93       	push	r20
     dc2:	5f 93       	push	r21
     dc4:	6f 93       	push	r22
     dc6:	7f 93       	push	r23
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	af 93       	push	r26
     dce:	bf 93       	push	r27
     dd0:	ef 93       	push	r30
     dd2:	ff 93       	push	r31
     dd4:	df 93       	push	r29
     dd6:	cf 93       	push	r28
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
    if (Global_PointerToFunction_CTC_TB != NULL)
     ddc:	80 91 8c 00 	lds	r24, 0x008C
     de0:	90 91 8d 00 	lds	r25, 0x008D
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	29 f0       	breq	.+10     	; 0xdf2 <__vector_8+0x40>
    {
    	Global_PointerToFunction_CTC_TB() ;
     de8:	e0 91 8c 00 	lds	r30, 0x008C
     dec:	f0 91 8d 00 	lds	r31, 0x008D
     df0:	09 95       	icall
    }
}
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	ff 91       	pop	r31
     df8:	ef 91       	pop	r30
     dfa:	bf 91       	pop	r27
     dfc:	af 91       	pop	r26
     dfe:	9f 91       	pop	r25
     e00:	8f 91       	pop	r24
     e02:	7f 91       	pop	r23
     e04:	6f 91       	pop	r22
     e06:	5f 91       	pop	r21
     e08:	4f 91       	pop	r20
     e0a:	3f 91       	pop	r19
     e0c:	2f 91       	pop	r18
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)      __attribute__((signal)) ;
void __vector_7 (void)
{
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	2f 93       	push	r18
     e24:	3f 93       	push	r19
     e26:	4f 93       	push	r20
     e28:	5f 93       	push	r21
     e2a:	6f 93       	push	r22
     e2c:	7f 93       	push	r23
     e2e:	8f 93       	push	r24
     e30:	9f 93       	push	r25
     e32:	af 93       	push	r26
     e34:	bf 93       	push	r27
     e36:	ef 93       	push	r30
     e38:	ff 93       	push	r31
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
    if (Global_PointerToFunction_CTC_TA != NULL)
     e42:	80 91 8a 00 	lds	r24, 0x008A
     e46:	90 91 8b 00 	lds	r25, 0x008B
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	29 f0       	breq	.+10     	; 0xe58 <__vector_7+0x40>
    {
    	Global_PointerToFunction_CTC_TA() ;
     e4e:	e0 91 8a 00 	lds	r30, 0x008A
     e52:	f0 91 8b 00 	lds	r31, 0x008B
     e56:	09 95       	icall
    }
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <GIE_void_Enable>:
#include "GIE_Private.h"
#include "GIE_Config.h"


void GIE_void_Enable ( void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	cd b7       	in	r28, 0x3d	; 61
     e84:	de b7       	in	r29, 0x3e	; 62
         SET_BIT(SREG_REG,SREG_I);
     e86:	af e5       	ldi	r26, 0x5F	; 95
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	ef e5       	ldi	r30, 0x5F	; 95
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	80 68       	ori	r24, 0x80	; 128
     e92:	8c 93       	st	X, r24
}
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <GIE_void_Disable>:
void GIE_void_Disable ( void)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
         CLR_BIT(SREG_REG,SREG_I);
     ea2:	af e5       	ldi	r26, 0x5F	; 95
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	ef e5       	ldi	r30, 0x5F	; 95
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8f 77       	andi	r24, 0x7F	; 127
     eae:	8c 93       	st	X, r24
}
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <EXTI_voidEnable>:
void (*Global_PF_Vector_3)(void) = NULL ;



void EXTI_voidEnable ( u8 Copy_u8EXTI_INTnumber , u8 Copy_u8SenseControl )
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
     ebe:	2a 97       	sbiw	r28, 0x0a	; 10
     ec0:	0f b6       	in	r0, 0x3f	; 63
     ec2:	f8 94       	cli
     ec4:	de bf       	out	0x3e, r29	; 62
     ec6:	0f be       	out	0x3f, r0	; 63
     ec8:	cd bf       	out	0x3d, r28	; 61
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	6a 83       	std	Y+2, r22	; 0x02
    switch ( Copy_u8EXTI_INTnumber )
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	28 2f       	mov	r18, r24
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	3a 87       	std	Y+10, r19	; 0x0a
     ed6:	29 87       	std	Y+9, r18	; 0x09
     ed8:	89 85       	ldd	r24, Y+9	; 0x09
     eda:	9a 85       	ldd	r25, Y+10	; 0x0a
     edc:	81 30       	cpi	r24, 0x01	; 1
     ede:	91 05       	cpc	r25, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <EXTI_voidEnable+0x2e>
     ee2:	6d c0       	rjmp	.+218    	; 0xfbe <EXTI_voidEnable+0x108>
     ee4:	29 85       	ldd	r18, Y+9	; 0x09
     ee6:	3a 85       	ldd	r19, Y+10	; 0x0a
     ee8:	22 30       	cpi	r18, 0x02	; 2
     eea:	31 05       	cpc	r19, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <EXTI_voidEnable+0x3a>
     eee:	c9 c0       	rjmp	.+402    	; 0x1082 <EXTI_voidEnable+0x1cc>
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	09 f0       	breq	.+2      	; 0xefa <EXTI_voidEnable+0x44>
     ef8:	e9 c0       	rjmp	.+466    	; 0x10cc <EXTI_voidEnable+0x216>
    {
        case EXTI_INT0 :     // Set 1 On PIN6 At GTCR_REG to [Enable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT0 .
                         SET_BIT(GICR_REG,PIN6);            
     efa:	ab e5       	ldi	r26, 0x5B	; 91
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	eb e5       	ldi	r30, 0x5B	; 91
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	80 64       	ori	r24, 0x40	; 64
     f06:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	38 87       	std	Y+8, r19	; 0x08
     f10:	2f 83       	std	Y+7, r18	; 0x07
     f12:	8f 81       	ldd	r24, Y+7	; 0x07
     f14:	98 85       	ldd	r25, Y+8	; 0x08
     f16:	81 30       	cpi	r24, 0x01	; 1
     f18:	91 05       	cpc	r25, r1
     f1a:	21 f1       	breq	.+72     	; 0xf64 <EXTI_voidEnable+0xae>
     f1c:	2f 81       	ldd	r18, Y+7	; 0x07
     f1e:	38 85       	ldd	r19, Y+8	; 0x08
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	2c f4       	brge	.+10     	; 0xf30 <EXTI_voidEnable+0x7a>
     f26:	8f 81       	ldd	r24, Y+7	; 0x07
     f28:	98 85       	ldd	r25, Y+8	; 0x08
     f2a:	00 97       	sbiw	r24, 0x00	; 0
     f2c:	61 f0       	breq	.+24     	; 0xf46 <EXTI_voidEnable+0x90>
     f2e:	ce c0       	rjmp	.+412    	; 0x10cc <EXTI_voidEnable+0x216>
     f30:	2f 81       	ldd	r18, Y+7	; 0x07
     f32:	38 85       	ldd	r19, Y+8	; 0x08
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	21 f1       	breq	.+72     	; 0xf82 <EXTI_voidEnable+0xcc>
     f3a:	8f 81       	ldd	r24, Y+7	; 0x07
     f3c:	98 85       	ldd	r25, Y+8	; 0x08
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	71 f1       	breq	.+92     	; 0xfa0 <EXTI_voidEnable+0xea>
     f44:	c3 c0       	rjmp	.+390    	; 0x10cc <EXTI_voidEnable+0x216>
                        {															 // BIT1  -  BIT0  on MCUCR_REG
                            case FALLING_EDGE :										 //    1   -   0   Falling Edge
                            	SET_BIT(MCUCR_REG,PIN1);
     f46:	a5 e5       	ldi	r26, 0x55	; 85
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e5 e5       	ldi	r30, 0x55	; 85
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	82 60       	ori	r24, 0x02	; 2
     f52:	8c 93       	st	X, r24
                            	CLR_BIT(MCUCR_REG,PIN0);
     f54:	a5 e5       	ldi	r26, 0x55	; 85
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	e5 e5       	ldi	r30, 0x55	; 85
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	8e 7f       	andi	r24, 0xFE	; 254
     f60:	8c 93       	st	X, r24
     f62:	b4 c0       	rjmp	.+360    	; 0x10cc <EXTI_voidEnable+0x216>
                            	break;
                            case RAISING_EDGE :     								 //   1   -   1   Raising Edge
                            	SET_BIT(MCUCR_REG,PIN1);
     f64:	a5 e5       	ldi	r26, 0x55	; 85
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e5 e5       	ldi	r30, 0x55	; 85
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	82 60       	ori	r24, 0x02	; 2
     f70:	8c 93       	st	X, r24
                            	SET_BIT(MCUCR_REG,PIN0);
     f72:	a5 e5       	ldi	r26, 0x55	; 85
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e5 e5       	ldi	r30, 0x55	; 85
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	81 60       	ori	r24, 0x01	; 1
     f7e:	8c 93       	st	X, r24
     f80:	a5 c0       	rjmp	.+330    	; 0x10cc <EXTI_voidEnable+0x216>
                            	break;
                            case LOW_LEVEL    :     								 //   0   -   0   Low Level
                            	CLR_BIT(MCUCR_REG,PIN1);
     f82:	a5 e5       	ldi	r26, 0x55	; 85
     f84:	b0 e0       	ldi	r27, 0x00	; 0
     f86:	e5 e5       	ldi	r30, 0x55	; 85
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	8d 7f       	andi	r24, 0xFD	; 253
     f8e:	8c 93       	st	X, r24
                            	CLR_BIT(MCUCR_REG,PIN0);
     f90:	a5 e5       	ldi	r26, 0x55	; 85
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	e5 e5       	ldi	r30, 0x55	; 85
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	8e 7f       	andi	r24, 0xFE	; 254
     f9c:	8c 93       	st	X, r24
     f9e:	96 c0       	rjmp	.+300    	; 0x10cc <EXTI_voidEnable+0x216>
                            	break;
                            case ON_CHANGE    :										//   0   -   1   On Change
                            	CLR_BIT(MCUCR_REG,PIN1);
     fa0:	a5 e5       	ldi	r26, 0x55	; 85
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e5 e5       	ldi	r30, 0x55	; 85
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	8d 7f       	andi	r24, 0xFD	; 253
     fac:	8c 93       	st	X, r24
                            	SET_BIT(MCUCR_REG,PIN0);
     fae:	a5 e5       	ldi	r26, 0x55	; 85
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e5 e5       	ldi	r30, 0x55	; 85
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	81 60       	ori	r24, 0x01	; 1
     fba:	8c 93       	st	X, r24
     fbc:	87 c0       	rjmp	.+270    	; 0x10cc <EXTI_voidEnable+0x216>
                            	break;
                        }
                        break;

        case EXTI_INT1 :     // Set 1 On PIN7 At GTCR_REG to [Enable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT1 .
                        SET_BIT(GICR_REG,PIN7);             
     fbe:	ab e5       	ldi	r26, 0x5B	; 91
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	eb e5       	ldi	r30, 0x5B	; 91
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	80 68       	ori	r24, 0x80	; 128
     fca:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	3e 83       	std	Y+6, r19	; 0x06
     fd4:	2d 83       	std	Y+5, r18	; 0x05
     fd6:	8d 81       	ldd	r24, Y+5	; 0x05
     fd8:	9e 81       	ldd	r25, Y+6	; 0x06
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	91 05       	cpc	r25, r1
     fde:	21 f1       	breq	.+72     	; 0x1028 <EXTI_voidEnable+0x172>
     fe0:	2d 81       	ldd	r18, Y+5	; 0x05
     fe2:	3e 81       	ldd	r19, Y+6	; 0x06
     fe4:	22 30       	cpi	r18, 0x02	; 2
     fe6:	31 05       	cpc	r19, r1
     fe8:	2c f4       	brge	.+10     	; 0xff4 <EXTI_voidEnable+0x13e>
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	61 f0       	breq	.+24     	; 0x100a <EXTI_voidEnable+0x154>
     ff2:	6c c0       	rjmp	.+216    	; 0x10cc <EXTI_voidEnable+0x216>
     ff4:	2d 81       	ldd	r18, Y+5	; 0x05
     ff6:	3e 81       	ldd	r19, Y+6	; 0x06
     ff8:	22 30       	cpi	r18, 0x02	; 2
     ffa:	31 05       	cpc	r19, r1
     ffc:	21 f1       	breq	.+72     	; 0x1046 <EXTI_voidEnable+0x190>
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	9e 81       	ldd	r25, Y+6	; 0x06
    1002:	83 30       	cpi	r24, 0x03	; 3
    1004:	91 05       	cpc	r25, r1
    1006:	71 f1       	breq	.+92     	; 0x1064 <EXTI_voidEnable+0x1ae>
    1008:	61 c0       	rjmp	.+194    	; 0x10cc <EXTI_voidEnable+0x216>
                        {                                                           // BIT3  -  BIT2  on MCUCR_REG
                            case FALLING_EDGE :										//   1   -   0   Falling Edge
                            	SET_BIT(MCUCR_REG,PIN3);
    100a:	a5 e5       	ldi	r26, 0x55	; 85
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	e5 e5       	ldi	r30, 0x55	; 85
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	80 81       	ld	r24, Z
    1014:	88 60       	ori	r24, 0x08	; 8
    1016:	8c 93       	st	X, r24
                            	CLR_BIT(MCUCR_REG,PIN2);
    1018:	a5 e5       	ldi	r26, 0x55	; 85
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e5 e5       	ldi	r30, 0x55	; 85
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8b 7f       	andi	r24, 0xFB	; 251
    1024:	8c 93       	st	X, r24
    1026:	52 c0       	rjmp	.+164    	; 0x10cc <EXTI_voidEnable+0x216>
                            	break;
                            case RAISING_EDGE :     								//   1   -   1   Raising Edge
                            	SET_BIT(MCUCR_REG,PIN3);
    1028:	a5 e5       	ldi	r26, 0x55	; 85
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e5 e5       	ldi	r30, 0x55	; 85
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	88 60       	ori	r24, 0x08	; 8
    1034:	8c 93       	st	X, r24
                            	SET_BIT(MCUCR_REG,PIN2);
    1036:	a5 e5       	ldi	r26, 0x55	; 85
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e5       	ldi	r30, 0x55	; 85
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	84 60       	ori	r24, 0x04	; 4
    1042:	8c 93       	st	X, r24
    1044:	43 c0       	rjmp	.+134    	; 0x10cc <EXTI_voidEnable+0x216>
                            	break;
                            case LOW_LEVEL    :										//   0   -   0   Low Level
                            	CLR_BIT(MCUCR_REG,PIN3);
    1046:	a5 e5       	ldi	r26, 0x55	; 85
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e5 e5       	ldi	r30, 0x55	; 85
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	87 7f       	andi	r24, 0xF7	; 247
    1052:	8c 93       	st	X, r24
                            	CLR_BIT(MCUCR_REG,PIN2);
    1054:	a5 e5       	ldi	r26, 0x55	; 85
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	e5 e5       	ldi	r30, 0x55	; 85
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	8b 7f       	andi	r24, 0xFB	; 251
    1060:	8c 93       	st	X, r24
    1062:	34 c0       	rjmp	.+104    	; 0x10cc <EXTI_voidEnable+0x216>
                            	break;
                            case ON_CHANGE    :										//   0   -   1   On Change
                            	CLR_BIT(MCUCR_REG,PIN3);
    1064:	a5 e5       	ldi	r26, 0x55	; 85
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e5 e5       	ldi	r30, 0x55	; 85
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	87 7f       	andi	r24, 0xF7	; 247
    1070:	8c 93       	st	X, r24
                            	SET_BIT(MCUCR_REG,PIN2);
    1072:	a5 e5       	ldi	r26, 0x55	; 85
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e5 e5       	ldi	r30, 0x55	; 85
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	84 60       	ori	r24, 0x04	; 4
    107e:	8c 93       	st	X, r24
    1080:	25 c0       	rjmp	.+74     	; 0x10cc <EXTI_voidEnable+0x216>
                            	break;
                            default           :                                                                   break;  
                        }
                        break;
        case EXTI_INT2 :      // Set 1 On PIN5 At GTCR_REG to [Enable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT2 .
                        SET_BIT(GICR_REG,PIN5);            
    1082:	ab e5       	ldi	r26, 0x5B	; 91
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	eb e5       	ldi	r30, 0x5B	; 91
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 62       	ori	r24, 0x20	; 32
    108e:	8c 93       	st	X, r24
                        switch ( Copy_u8SenseControl )
    1090:	8a 81       	ldd	r24, Y+2	; 0x02
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3c 83       	std	Y+4, r19	; 0x04
    1098:	2b 83       	std	Y+3, r18	; 0x03
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	31 f0       	breq	.+12     	; 0x10ae <EXTI_voidEnable+0x1f8>
    10a2:	2b 81       	ldd	r18, Y+3	; 0x03
    10a4:	3c 81       	ldd	r19, Y+4	; 0x04
    10a6:	21 30       	cpi	r18, 0x01	; 1
    10a8:	31 05       	cpc	r19, r1
    10aa:	49 f0       	breq	.+18     	; 0x10be <EXTI_voidEnable+0x208>
    10ac:	0f c0       	rjmp	.+30     	; 0x10cc <EXTI_voidEnable+0x216>
                        {                                                                      //  BIT6  on  MCUCSR_REG
                            case FALLING_EDGE :
                            	CLR_BIT(MCUCSR_REG,PIN6);      								   //   0    Falling Edge
    10ae:	a4 e5       	ldi	r26, 0x54	; 84
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e4 e5       	ldi	r30, 0x54	; 84
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	8f 7b       	andi	r24, 0xBF	; 191
    10ba:	8c 93       	st	X, r24
    10bc:	07 c0       	rjmp	.+14     	; 0x10cc <EXTI_voidEnable+0x216>
                            	break;
                            case RAISING_EDGE :     										   //   1    Raising Edge
                            	SET_BIT(MCUCSR_REG,PIN6);
    10be:	a4 e5       	ldi	r26, 0x54	; 84
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e4 e5       	ldi	r30, 0x54	; 84
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	80 64       	ori	r24, 0x40	; 64
    10ca:	8c 93       	st	X, r24
                        } 
                        break;
        default   :
        	break;
    }
}
    10cc:	2a 96       	adiw	r28, 0x0a	; 10
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	08 95       	ret

000010de <EXTI_voidDisable>:


void EXTI_voidDisable ( u8 Copy_u8EXTI_INTnumber )
{
    10de:	df 93       	push	r29
    10e0:	cf 93       	push	r28
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <EXTI_voidDisable+0x6>
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	89 83       	std	Y+1, r24	; 0x01
    switch ( Copy_u8EXTI_INTnumber )
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	3b 83       	std	Y+3, r19	; 0x03
    10f4:	2a 83       	std	Y+2, r18	; 0x02
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	9b 81       	ldd	r25, Y+3	; 0x03
    10fa:	81 30       	cpi	r24, 0x01	; 1
    10fc:	91 05       	cpc	r25, r1
    10fe:	89 f0       	breq	.+34     	; 0x1122 <EXTI_voidDisable+0x44>
    1100:	2a 81       	ldd	r18, Y+2	; 0x02
    1102:	3b 81       	ldd	r19, Y+3	; 0x03
    1104:	22 30       	cpi	r18, 0x02	; 2
    1106:	31 05       	cpc	r19, r1
    1108:	a1 f0       	breq	.+40     	; 0x1132 <EXTI_voidDisable+0x54>
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
    110c:	9b 81       	ldd	r25, Y+3	; 0x03
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	b9 f4       	brne	.+46     	; 0x1140 <EXTI_voidDisable+0x62>
    {
        case EXTI_INT0 :         // Set 0 On PIN6 At GTCR_REG to [Disable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT0 .
        	CLR_BIT(GICR_REG,PIN6);
    1112:	ab e5       	ldi	r26, 0x5B	; 91
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	eb e5       	ldi	r30, 0x5B	; 91
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	8f 7b       	andi	r24, 0xBF	; 191
    111e:	8c 93       	st	X, r24
    1120:	0f c0       	rjmp	.+30     	; 0x1140 <EXTI_voidDisable+0x62>
        	break;
        case EXTI_INT1 :         // Set 0 On PIN7 At GTCR_REG to [Disable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT1 .
        	CLR_BIT(GICR_REG,PIN7);
    1122:	ab e5       	ldi	r26, 0x5B	; 91
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	eb e5       	ldi	r30, 0x5B	; 91
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8f 77       	andi	r24, 0x7F	; 127
    112e:	8c 93       	st	X, r24
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <EXTI_voidDisable+0x62>
        	break;
        case EXTI_INT2 :         // Set 0 On PIN5 At GTCR_REG to [Disable] (PIE) Peripheral EXTI_INTerrupt Enable to EXTI_INT2 .
        	CLR_BIT(GICR_REG,PIN5);
    1132:	ab e5       	ldi	r26, 0x5B	; 91
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	eb e5       	ldi	r30, 0x5B	; 91
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	8f 7d       	andi	r24, 0xDF	; 223
    113e:	8c 93       	st	X, r24
        	break;
        default   :
        	break;
    }
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <EXTI_voidSetCallBack>:

void EXTI_voidSetCallBack ( u8 Copy_u8EXTI_INTnumber , void (*Local_PoEXTI_INTerToFunction) (void) )
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <EXTI_voidSetCallBack+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <EXTI_voidSetCallBack+0x8>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	7b 83       	std	Y+3, r23	; 0x03
    115e:	6a 83       	std	Y+2, r22	; 0x02
    switch( Copy_u8EXTI_INTnumber )
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3d 83       	std	Y+5, r19	; 0x05
    1168:	2c 83       	std	Y+4, r18	; 0x04
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	9d 81       	ldd	r25, Y+5	; 0x05
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	81 f0       	breq	.+32     	; 0x1194 <EXTI_voidSetCallBack+0x48>
    1174:	2c 81       	ldd	r18, Y+4	; 0x04
    1176:	3d 81       	ldd	r19, Y+5	; 0x05
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	91 f0       	breq	.+36     	; 0x11a2 <EXTI_voidSetCallBack+0x56>
    117e:	8c 81       	ldd	r24, Y+4	; 0x04
    1180:	9d 81       	ldd	r25, Y+5	; 0x05
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	a1 f4       	brne	.+40     	; 0x11ae <EXTI_voidSetCallBack+0x62>
    {
        case EXTI_INT0 :
        	Global_PF_Vector_1 = Local_PoEXTI_INTerToFunction ;
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	9b 81       	ldd	r25, Y+3	; 0x03
    118a:	90 93 95 00 	sts	0x0095, r25
    118e:	80 93 94 00 	sts	0x0094, r24
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <EXTI_voidSetCallBack+0x62>
        	break;
        case EXTI_INT1 :
        	Global_PF_Vector_2 = Local_PoEXTI_INTerToFunction ;
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	9b 81       	ldd	r25, Y+3	; 0x03
    1198:	90 93 97 00 	sts	0x0097, r25
    119c:	80 93 96 00 	sts	0x0096, r24
    11a0:	06 c0       	rjmp	.+12     	; 0x11ae <EXTI_voidSetCallBack+0x62>
        	break;
        case EXTI_INT2 :
        	Global_PF_Vector_3 = Local_PoEXTI_INTerToFunction ;
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	9b 81       	ldd	r25, Y+3	; 0x03
    11a6:	90 93 99 00 	sts	0x0099, r25
    11aa:	80 93 98 00 	sts	0x0098, r24
        	break;
        default   :
        	break;
    } 
}
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	cf 91       	pop	r28
    11ba:	df 91       	pop	r29
    11bc:	08 95       	ret

000011be <EXTI_voidClearFlag>:

void EXTI_voidClearFlag ( u8 Copy_u8Line ){
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	0f 92       	push	r0
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
    11c8:	89 83       	std	Y+1, r24	; 0x01

    SET_BIT( GIFR_REG , Copy_u8Line );
    11ca:	aa e5       	ldi	r26, 0x5A	; 90
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	ea e5       	ldi	r30, 0x5A	; 90
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	02 2e       	mov	r0, r18
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <EXTI_voidClearFlag+0x2a>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <EXTI_voidClearFlag+0x26>
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24

}
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <__vector_1>:

void __vector_1 (void)   __attribute__((signal));
void __vector_1 (void)
{
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_1 != NULL )
    1222:	80 91 94 00 	lds	r24, 0x0094
    1226:	90 91 95 00 	lds	r25, 0x0095
    122a:	00 97       	sbiw	r24, 0x00	; 0
    122c:	41 f0       	breq	.+16     	; 0x123e <__vector_1+0x46>
    {
        Global_PF_Vector_1 ();  // calling Global poEXTI_INTer to function that contain address of Application Function with EXTI_INT0.
    122e:	e0 91 94 00 	lds	r30, 0x0094
    1232:	f0 91 95 00 	lds	r31, 0x0095
    1236:	09 95       	icall
        EXTI_voidClearFlag( EXTI_INT0 );
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0e 94 df 08 	call	0x11be	; 0x11be <EXTI_voidClearFlag>
    }

}
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	ff 91       	pop	r31
    1244:	ef 91       	pop	r30
    1246:	bf 91       	pop	r27
    1248:	af 91       	pop	r26
    124a:	9f 91       	pop	r25
    124c:	8f 91       	pop	r24
    124e:	7f 91       	pop	r23
    1250:	6f 91       	pop	r22
    1252:	5f 91       	pop	r21
    1254:	4f 91       	pop	r20
    1256:	3f 91       	pop	r19
    1258:	2f 91       	pop	r18
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <__vector_2>:

void __vector_2 (void)   __attribute__((signal));
void __vector_2 (void) 
{
    1264:	1f 92       	push	r1
    1266:	0f 92       	push	r0
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	0f 92       	push	r0
    126c:	11 24       	eor	r1, r1
    126e:	2f 93       	push	r18
    1270:	3f 93       	push	r19
    1272:	4f 93       	push	r20
    1274:	5f 93       	push	r21
    1276:	6f 93       	push	r22
    1278:	7f 93       	push	r23
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_2 != NULL )
    128e:	80 91 96 00 	lds	r24, 0x0096
    1292:	90 91 97 00 	lds	r25, 0x0097
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	41 f0       	breq	.+16     	; 0x12aa <__vector_2+0x46>
    {
        Global_PF_Vector_2 ();  // calling Global poEXTI_INTer to function that contain address of Application Function with EXTI_INT1.
    129a:	e0 91 96 00 	lds	r30, 0x0096
    129e:	f0 91 97 00 	lds	r31, 0x0097
    12a2:	09 95       	icall
        EXTI_voidClearFlag( EXTI_INT1 );
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	0e 94 df 08 	call	0x11be	; 0x11be <EXTI_voidClearFlag>
    }
    
}
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	ff 91       	pop	r31
    12b0:	ef 91       	pop	r30
    12b2:	bf 91       	pop	r27
    12b4:	af 91       	pop	r26
    12b6:	9f 91       	pop	r25
    12b8:	8f 91       	pop	r24
    12ba:	7f 91       	pop	r23
    12bc:	6f 91       	pop	r22
    12be:	5f 91       	pop	r21
    12c0:	4f 91       	pop	r20
    12c2:	3f 91       	pop	r19
    12c4:	2f 91       	pop	r18
    12c6:	0f 90       	pop	r0
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	0f 90       	pop	r0
    12cc:	1f 90       	pop	r1
    12ce:	18 95       	reti

000012d0 <__vector_3>:

void __vector_3 (void)   __attribute__((signal));
void __vector_3 (void) 
{
    12d0:	1f 92       	push	r1
    12d2:	0f 92       	push	r0
    12d4:	0f b6       	in	r0, 0x3f	; 63
    12d6:	0f 92       	push	r0
    12d8:	11 24       	eor	r1, r1
    12da:	2f 93       	push	r18
    12dc:	3f 93       	push	r19
    12de:	4f 93       	push	r20
    12e0:	5f 93       	push	r21
    12e2:	6f 93       	push	r22
    12e4:	7f 93       	push	r23
    12e6:	8f 93       	push	r24
    12e8:	9f 93       	push	r25
    12ea:	af 93       	push	r26
    12ec:	bf 93       	push	r27
    12ee:	ef 93       	push	r30
    12f0:	ff 93       	push	r31
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    if ( Global_PF_Vector_3 != NULL )
    12fa:	80 91 98 00 	lds	r24, 0x0098
    12fe:	90 91 99 00 	lds	r25, 0x0099
    1302:	00 97       	sbiw	r24, 0x00	; 0
    1304:	41 f0       	breq	.+16     	; 0x1316 <__vector_3+0x46>
    {
        Global_PF_Vector_3 ();  // calling Global poEXTI_INTer to function that contain address of Application Function with EXTI_INT2.
    1306:	e0 91 98 00 	lds	r30, 0x0098
    130a:	f0 91 99 00 	lds	r31, 0x0099
    130e:	09 95       	icall
        EXTI_voidClearFlag( EXTI_INT2 );
    1310:	82 e0       	ldi	r24, 0x02	; 2
    1312:	0e 94 df 08 	call	0x11be	; 0x11be <EXTI_voidClearFlag>
    }
}
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	ff 91       	pop	r31
    131c:	ef 91       	pop	r30
    131e:	bf 91       	pop	r27
    1320:	af 91       	pop	r26
    1322:	9f 91       	pop	r25
    1324:	8f 91       	pop	r24
    1326:	7f 91       	pop	r23
    1328:	6f 91       	pop	r22
    132a:	5f 91       	pop	r21
    132c:	4f 91       	pop	r20
    132e:	3f 91       	pop	r19
    1330:	2f 91       	pop	r18
    1332:	0f 90       	pop	r0
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	0f 90       	pop	r0
    1338:	1f 90       	pop	r1
    133a:	18 95       	reti

0000133c <DIO_voidSetPinDirection>:
#include "DIO_Config.h"



void DIO_voidSetPinDirection (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Direction )
{
    133c:	df 93       	push	r29
    133e:	cf 93       	push	r28
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
    1344:	29 97       	sbiw	r28, 0x09	; 9
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	6a 83       	std	Y+2, r22	; 0x02
    1354:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	08 f0       	brcs	.+2      	; 0x135e <DIO_voidSetPinDirection+0x22>
    135c:	f6 c0       	rjmp	.+492    	; 0x154a <DIO_voidSetPinDirection+0x20e>
    135e:	8a 81       	ldd	r24, Y+2	; 0x02
    1360:	88 30       	cpi	r24, 0x08	; 8
    1362:	08 f0       	brcs	.+2      	; 0x1366 <DIO_voidSetPinDirection+0x2a>
    1364:	f2 c0       	rjmp	.+484    	; 0x154a <DIO_voidSetPinDirection+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	39 87       	std	Y+9, r19	; 0x09
    136e:	28 87       	std	Y+8, r18	; 0x08
    1370:	88 85       	ldd	r24, Y+8	; 0x08
    1372:	99 85       	ldd	r25, Y+9	; 0x09
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	39 f0       	breq	.+14     	; 0x1386 <DIO_voidSetPinDirection+0x4a>
    1378:	28 85       	ldd	r18, Y+8	; 0x08
    137a:	39 85       	ldd	r19, Y+9	; 0x09
    137c:	21 30       	cpi	r18, 0x01	; 1
    137e:	31 05       	cpc	r19, r1
    1380:	09 f4       	brne	.+2      	; 0x1384 <DIO_voidSetPinDirection+0x48>
    1382:	75 c0       	rjmp	.+234    	; 0x146e <DIO_voidSetPinDirection+0x132>
    1384:	e2 c0       	rjmp	.+452    	; 0x154a <DIO_voidSetPinDirection+0x20e>
        {
            case DIO_INPUT :    switch(Copy_u8PortNumber)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3f 83       	std	Y+7, r19	; 0x07
    138e:	2e 83       	std	Y+6, r18	; 0x06
    1390:	8e 81       	ldd	r24, Y+6	; 0x06
    1392:	9f 81       	ldd	r25, Y+7	; 0x07
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	91 05       	cpc	r25, r1
    1398:	59 f1       	breq	.+86     	; 0x13f0 <DIO_voidSetPinDirection+0xb4>
    139a:	2e 81       	ldd	r18, Y+6	; 0x06
    139c:	3f 81       	ldd	r19, Y+7	; 0x07
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	2c f4       	brge	.+10     	; 0x13ae <DIO_voidSetPinDirection+0x72>
    13a4:	8e 81       	ldd	r24, Y+6	; 0x06
    13a6:	9f 81       	ldd	r25, Y+7	; 0x07
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	69 f0       	breq	.+26     	; 0x13c6 <DIO_voidSetPinDirection+0x8a>
    13ac:	ce c0       	rjmp	.+412    	; 0x154a <DIO_voidSetPinDirection+0x20e>
    13ae:	2e 81       	ldd	r18, Y+6	; 0x06
    13b0:	3f 81       	ldd	r19, Y+7	; 0x07
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	89 f1       	breq	.+98     	; 0x141a <DIO_voidSetPinDirection+0xde>
    13b8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ba:	9f 81       	ldd	r25, Y+7	; 0x07
    13bc:	83 30       	cpi	r24, 0x03	; 3
    13be:	91 05       	cpc	r25, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <DIO_voidSetPinDirection+0x88>
    13c2:	40 c0       	rjmp	.+128    	; 0x1444 <DIO_voidSetPinDirection+0x108>
    13c4:	c2 c0       	rjmp	.+388    	; 0x154a <DIO_voidSetPinDirection+0x20e>
                            {
                                case DIO_PORTA :    CLR_BIT( DDRA_REG ,Copy_u8PinNumber );    break;       
    13c6:	aa e3       	ldi	r26, 0x3A	; 58
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ea e3       	ldi	r30, 0x3A	; 58
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_voidSetPinDirection+0xa8>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_voidSetPinDirection+0xa4>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
    13ee:	ad c0       	rjmp	.+346    	; 0x154a <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTB :    CLR_BIT( DDRB_REG ,Copy_u8PinNumber );    break;
    13f0:	a7 e3       	ldi	r26, 0x37	; 55
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e7 e3       	ldi	r30, 0x37	; 55
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	48 2f       	mov	r20, r24
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	28 2f       	mov	r18, r24
    1400:	30 e0       	ldi	r19, 0x00	; 0
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	02 2e       	mov	r0, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_voidSetPinDirection+0xd2>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	0a 94       	dec	r0
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_voidSetPinDirection+0xce>
    1412:	80 95       	com	r24
    1414:	84 23       	and	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	98 c0       	rjmp	.+304    	; 0x154a <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTC :    CLR_BIT( DDRC_REG ,Copy_u8PinNumber );    break;
    141a:	a4 e3       	ldi	r26, 0x34	; 52
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e4 e3       	ldi	r30, 0x34	; 52
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_voidSetPinDirection+0xfc>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_voidSetPinDirection+0xf8>
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	83 c0       	rjmp	.+262    	; 0x154a <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTD :    CLR_BIT( DDRD_REG ,Copy_u8PinNumber );    break;
    1444:	a1 e3       	ldi	r26, 0x31	; 49
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e1 e3       	ldi	r30, 0x31	; 49
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8a 81       	ldd	r24, Y+2	; 0x02
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_voidSetPinDirection+0x126>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_voidSetPinDirection+0x122>
    1466:	80 95       	com	r24
    1468:	84 23       	and	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	6e c0       	rjmp	.+220    	; 0x154a <DIO_voidSetPinDirection+0x20e>
                                default    :                                                break;
                            }
                            break;
            case DIO_OUTPUT :   switch(Copy_u8PortNumber)
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	3d 83       	std	Y+5, r19	; 0x05
    1476:	2c 83       	std	Y+4, r18	; 0x04
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	81 30       	cpi	r24, 0x01	; 1
    147e:	91 05       	cpc	r25, r1
    1480:	49 f1       	breq	.+82     	; 0x14d4 <DIO_voidSetPinDirection+0x198>
    1482:	2c 81       	ldd	r18, Y+4	; 0x04
    1484:	3d 81       	ldd	r19, Y+5	; 0x05
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	2c f4       	brge	.+10     	; 0x1496 <DIO_voidSetPinDirection+0x15a>
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	00 97       	sbiw	r24, 0x00	; 0
    1492:	61 f0       	breq	.+24     	; 0x14ac <DIO_voidSetPinDirection+0x170>
    1494:	5a c0       	rjmp	.+180    	; 0x154a <DIO_voidSetPinDirection+0x20e>
    1496:	2c 81       	ldd	r18, Y+4	; 0x04
    1498:	3d 81       	ldd	r19, Y+5	; 0x05
    149a:	22 30       	cpi	r18, 0x02	; 2
    149c:	31 05       	cpc	r19, r1
    149e:	71 f1       	breq	.+92     	; 0x14fc <DIO_voidSetPinDirection+0x1c0>
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	9d 81       	ldd	r25, Y+5	; 0x05
    14a4:	83 30       	cpi	r24, 0x03	; 3
    14a6:	91 05       	cpc	r25, r1
    14a8:	e9 f1       	breq	.+122    	; 0x1524 <DIO_voidSetPinDirection+0x1e8>
    14aa:	4f c0       	rjmp	.+158    	; 0x154a <DIO_voidSetPinDirection+0x20e>
                            {
                                case DIO_PORTA :    SET_BIT( DDRA_REG ,Copy_u8PinNumber );      break;
    14ac:	aa e3       	ldi	r26, 0x3A	; 58
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	ea e3       	ldi	r30, 0x3A	; 58
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	02 2e       	mov	r0, r18
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <DIO_voidSetPinDirection+0x18e>
    14c6:	88 0f       	add	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	0a 94       	dec	r0
    14cc:	e2 f7       	brpl	.-8      	; 0x14c6 <DIO_voidSetPinDirection+0x18a>
    14ce:	84 2b       	or	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	3b c0       	rjmp	.+118    	; 0x154a <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTB :    SET_BIT( DDRB_REG ,Copy_u8PinNumber );      break;
    14d4:	a7 e3       	ldi	r26, 0x37	; 55
    14d6:	b0 e0       	ldi	r27, 0x00	; 0
    14d8:	e7 e3       	ldi	r30, 0x37	; 55
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	80 81       	ld	r24, Z
    14de:	48 2f       	mov	r20, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	02 2e       	mov	r0, r18
    14ec:	02 c0       	rjmp	.+4      	; 0x14f2 <DIO_voidSetPinDirection+0x1b6>
    14ee:	88 0f       	add	r24, r24
    14f0:	99 1f       	adc	r25, r25
    14f2:	0a 94       	dec	r0
    14f4:	e2 f7       	brpl	.-8      	; 0x14ee <DIO_voidSetPinDirection+0x1b2>
    14f6:	84 2b       	or	r24, r20
    14f8:	8c 93       	st	X, r24
    14fa:	27 c0       	rjmp	.+78     	; 0x154a <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTC :    SET_BIT( DDRC_REG ,Copy_u8PinNumber );      break;
    14fc:	a4 e3       	ldi	r26, 0x34	; 52
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e4 e3       	ldi	r30, 0x34	; 52
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	28 2f       	mov	r18, r24
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	90 e0       	ldi	r25, 0x00	; 0
    1512:	02 2e       	mov	r0, r18
    1514:	02 c0       	rjmp	.+4      	; 0x151a <DIO_voidSetPinDirection+0x1de>
    1516:	88 0f       	add	r24, r24
    1518:	99 1f       	adc	r25, r25
    151a:	0a 94       	dec	r0
    151c:	e2 f7       	brpl	.-8      	; 0x1516 <DIO_voidSetPinDirection+0x1da>
    151e:	84 2b       	or	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	13 c0       	rjmp	.+38     	; 0x154a <DIO_voidSetPinDirection+0x20e>
                                case DIO_PORTD :    SET_BIT( DDRD_REG ,Copy_u8PinNumber );      break;
    1524:	a1 e3       	ldi	r26, 0x31	; 49
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e1 e3       	ldi	r30, 0x31	; 49
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_voidSetPinDirection+0x206>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_voidSetPinDirection+0x202>
    1546:	84 2b       	or	r24, r20
    1548:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    154a:	29 96       	adiw	r28, 0x09	; 9
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection (u8 Copy_u8PortNumber, u8 Copy_u8Direction )
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	28 97       	sbiw	r28, 0x08	; 8
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	84 30       	cpi	r24, 0x04	; 4
    1578:	08 f0       	brcs	.+2      	; 0x157c <DIO_voidSetPortDirection+0x20>
    157a:	70 c0       	rjmp	.+224    	; 0x165c <DIO_voidSetPortDirection+0x100>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Direction)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	38 87       	std	Y+8, r19	; 0x08
    1584:	2f 83       	std	Y+7, r18	; 0x07
    1586:	8f 81       	ldd	r24, Y+7	; 0x07
    1588:	98 85       	ldd	r25, Y+8	; 0x08
    158a:	00 97       	sbiw	r24, 0x00	; 0
    158c:	31 f0       	breq	.+12     	; 0x159a <DIO_voidSetPortDirection+0x3e>
    158e:	2f 81       	ldd	r18, Y+7	; 0x07
    1590:	38 85       	ldd	r19, Y+8	; 0x08
    1592:	21 30       	cpi	r18, 0x01	; 1
    1594:	31 05       	cpc	r19, r1
    1596:	81 f1       	breq	.+96     	; 0x15f8 <DIO_voidSetPortDirection+0x9c>
    1598:	61 c0       	rjmp	.+194    	; 0x165c <DIO_voidSetPortDirection+0x100>
        {
            case DIO_INPUT :    switch(Copy_u8PortNumber)
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	3e 83       	std	Y+6, r19	; 0x06
    15a2:	2d 83       	std	Y+5, r18	; 0x05
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	91 05       	cpc	r25, r1
    15ac:	c9 f0       	breq	.+50     	; 0x15e0 <DIO_voidSetPortDirection+0x84>
    15ae:	2d 81       	ldd	r18, Y+5	; 0x05
    15b0:	3e 81       	ldd	r19, Y+6	; 0x06
    15b2:	22 30       	cpi	r18, 0x02	; 2
    15b4:	31 05       	cpc	r19, r1
    15b6:	2c f4       	brge	.+10     	; 0x15c2 <DIO_voidSetPortDirection+0x66>
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	00 97       	sbiw	r24, 0x00	; 0
    15be:	61 f0       	breq	.+24     	; 0x15d8 <DIO_voidSetPortDirection+0x7c>
    15c0:	4d c0       	rjmp	.+154    	; 0x165c <DIO_voidSetPortDirection+0x100>
    15c2:	2d 81       	ldd	r18, Y+5	; 0x05
    15c4:	3e 81       	ldd	r19, Y+6	; 0x06
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	71 f0       	breq	.+28     	; 0x15e8 <DIO_voidSetPortDirection+0x8c>
    15cc:	8d 81       	ldd	r24, Y+5	; 0x05
    15ce:	9e 81       	ldd	r25, Y+6	; 0x06
    15d0:	83 30       	cpi	r24, 0x03	; 3
    15d2:	91 05       	cpc	r25, r1
    15d4:	69 f0       	breq	.+26     	; 0x15f0 <DIO_voidSetPortDirection+0x94>
    15d6:	42 c0       	rjmp	.+132    	; 0x165c <DIO_voidSetPortDirection+0x100>
                            {
                                case DIO_PORTA :    DDRA_REG = 0x00 ;   break;
    15d8:	ea e3       	ldi	r30, 0x3A	; 58
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	10 82       	st	Z, r1
    15de:	3e c0       	rjmp	.+124    	; 0x165c <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTB :    DDRB_REG = 0x00 ;   break;
    15e0:	e7 e3       	ldi	r30, 0x37	; 55
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	10 82       	st	Z, r1
    15e6:	3a c0       	rjmp	.+116    	; 0x165c <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTC :    DDRC_REG = 0x00 ;   break;
    15e8:	e4 e3       	ldi	r30, 0x34	; 52
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	10 82       	st	Z, r1
    15ee:	36 c0       	rjmp	.+108    	; 0x165c <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTD :    DDRD_REG = 0x00 ;   break;
    15f0:	e1 e3       	ldi	r30, 0x31	; 49
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	10 82       	st	Z, r1
    15f6:	32 c0       	rjmp	.+100    	; 0x165c <DIO_voidSetPortDirection+0x100>
                                default    :                        break;
                            }
                            break;
            case DIO_OUTPUT :   switch(Copy_u8PortNumber)
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	3c 83       	std	Y+4, r19	; 0x04
    1600:	2b 83       	std	Y+3, r18	; 0x03
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	9c 81       	ldd	r25, Y+4	; 0x04
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	91 05       	cpc	r25, r1
    160a:	d1 f0       	breq	.+52     	; 0x1640 <DIO_voidSetPortDirection+0xe4>
    160c:	2b 81       	ldd	r18, Y+3	; 0x03
    160e:	3c 81       	ldd	r19, Y+4	; 0x04
    1610:	22 30       	cpi	r18, 0x02	; 2
    1612:	31 05       	cpc	r19, r1
    1614:	2c f4       	brge	.+10     	; 0x1620 <DIO_voidSetPortDirection+0xc4>
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	9c 81       	ldd	r25, Y+4	; 0x04
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	61 f0       	breq	.+24     	; 0x1636 <DIO_voidSetPortDirection+0xda>
    161e:	1e c0       	rjmp	.+60     	; 0x165c <DIO_voidSetPortDirection+0x100>
    1620:	2b 81       	ldd	r18, Y+3	; 0x03
    1622:	3c 81       	ldd	r19, Y+4	; 0x04
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	81 f0       	breq	.+32     	; 0x164a <DIO_voidSetPortDirection+0xee>
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	9c 81       	ldd	r25, Y+4	; 0x04
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	91 05       	cpc	r25, r1
    1632:	81 f0       	breq	.+32     	; 0x1654 <DIO_voidSetPortDirection+0xf8>
    1634:	13 c0       	rjmp	.+38     	; 0x165c <DIO_voidSetPortDirection+0x100>
                            {
                                case DIO_PORTA :    DDRA_REG = 0xff ;   break;
    1636:	ea e3       	ldi	r30, 0x3A	; 58
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	8f ef       	ldi	r24, 0xFF	; 255
    163c:	80 83       	st	Z, r24
    163e:	0e c0       	rjmp	.+28     	; 0x165c <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTB :    DDRB_REG = 0xff ;   break;
    1640:	e7 e3       	ldi	r30, 0x37	; 55
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8f ef       	ldi	r24, 0xFF	; 255
    1646:	80 83       	st	Z, r24
    1648:	09 c0       	rjmp	.+18     	; 0x165c <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTC :    DDRC_REG = 0xff ;   break;
    164a:	e4 e3       	ldi	r30, 0x34	; 52
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	8f ef       	ldi	r24, 0xFF	; 255
    1650:	80 83       	st	Z, r24
    1652:	04 c0       	rjmp	.+8      	; 0x165c <DIO_voidSetPortDirection+0x100>
                                case DIO_PORTD :    DDRD_REG = 0xff ;   break;
    1654:	e1 e3       	ldi	r30, 0x31	; 49
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	80 83       	st	Z, r24
                            break;
            default :       break;
                            
        }
    }
}
    165c:	28 96       	adiw	r28, 0x08	; 8
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <DIO_voidSetPinValue>:


void DIO_voidSetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber, u8 Copy_u8Value )
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	29 97       	sbiw	r28, 0x09	; 9
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	6a 83       	std	Y+2, r22	; 0x02
    1686:	4b 83       	std	Y+3, r20	; 0x03
        /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	84 30       	cpi	r24, 0x04	; 4
    168c:	08 f0       	brcs	.+2      	; 0x1690 <DIO_voidSetPinValue+0x22>
    168e:	f6 c0       	rjmp	.+492    	; 0x187c <DIO_voidSetPinValue+0x20e>
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	88 30       	cpi	r24, 0x08	; 8
    1694:	08 f0       	brcs	.+2      	; 0x1698 <DIO_voidSetPinValue+0x2a>
    1696:	f2 c0       	rjmp	.+484    	; 0x187c <DIO_voidSetPinValue+0x20e>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Value)
    1698:	8b 81       	ldd	r24, Y+3	; 0x03
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	39 87       	std	Y+9, r19	; 0x09
    16a0:	28 87       	std	Y+8, r18	; 0x08
    16a2:	88 85       	ldd	r24, Y+8	; 0x08
    16a4:	99 85       	ldd	r25, Y+9	; 0x09
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	39 f0       	breq	.+14     	; 0x16b8 <DIO_voidSetPinValue+0x4a>
    16aa:	28 85       	ldd	r18, Y+8	; 0x08
    16ac:	39 85       	ldd	r19, Y+9	; 0x09
    16ae:	21 30       	cpi	r18, 0x01	; 1
    16b0:	31 05       	cpc	r19, r1
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <DIO_voidSetPinValue+0x48>
    16b4:	75 c0       	rjmp	.+234    	; 0x17a0 <DIO_voidSetPinValue+0x132>
    16b6:	e2 c0       	rjmp	.+452    	; 0x187c <DIO_voidSetPinValue+0x20e>
        {
            case DIO_LOW :    switch(Copy_u8PortNumber)
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	3f 83       	std	Y+7, r19	; 0x07
    16c0:	2e 83       	std	Y+6, r18	; 0x06
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	9f 81       	ldd	r25, Y+7	; 0x07
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	91 05       	cpc	r25, r1
    16ca:	59 f1       	breq	.+86     	; 0x1722 <DIO_voidSetPinValue+0xb4>
    16cc:	2e 81       	ldd	r18, Y+6	; 0x06
    16ce:	3f 81       	ldd	r19, Y+7	; 0x07
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <DIO_voidSetPinValue+0x72>
    16d6:	8e 81       	ldd	r24, Y+6	; 0x06
    16d8:	9f 81       	ldd	r25, Y+7	; 0x07
    16da:	00 97       	sbiw	r24, 0x00	; 0
    16dc:	69 f0       	breq	.+26     	; 0x16f8 <DIO_voidSetPinValue+0x8a>
    16de:	ce c0       	rjmp	.+412    	; 0x187c <DIO_voidSetPinValue+0x20e>
    16e0:	2e 81       	ldd	r18, Y+6	; 0x06
    16e2:	3f 81       	ldd	r19, Y+7	; 0x07
    16e4:	22 30       	cpi	r18, 0x02	; 2
    16e6:	31 05       	cpc	r19, r1
    16e8:	89 f1       	breq	.+98     	; 0x174c <DIO_voidSetPinValue+0xde>
    16ea:	8e 81       	ldd	r24, Y+6	; 0x06
    16ec:	9f 81       	ldd	r25, Y+7	; 0x07
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	91 05       	cpc	r25, r1
    16f2:	09 f4       	brne	.+2      	; 0x16f6 <DIO_voidSetPinValue+0x88>
    16f4:	40 c0       	rjmp	.+128    	; 0x1776 <DIO_voidSetPinValue+0x108>
    16f6:	c2 c0       	rjmp	.+388    	; 0x187c <DIO_voidSetPinValue+0x20e>
                            {
                                case DIO_PORTA :    CLR_BIT( PORTA_REG ,Copy_u8PinNumber );   break;
    16f8:	ab e3       	ldi	r26, 0x3B	; 59
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	eb e3       	ldi	r30, 0x3B	; 59
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	48 2f       	mov	r20, r24
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <DIO_voidSetPinValue+0xa8>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <DIO_voidSetPinValue+0xa4>
    171a:	80 95       	com	r24
    171c:	84 23       	and	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	ad c0       	rjmp	.+346    	; 0x187c <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTB :    CLR_BIT( PORTB_REG ,Copy_u8PinNumber );   break;
    1722:	a8 e3       	ldi	r26, 0x38	; 56
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e8 e3       	ldi	r30, 0x38	; 56
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_voidSetPinValue+0xd2>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_voidSetPinValue+0xce>
    1744:	80 95       	com	r24
    1746:	84 23       	and	r24, r20
    1748:	8c 93       	st	X, r24
    174a:	98 c0       	rjmp	.+304    	; 0x187c <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTC :    CLR_BIT( PORTC_REG ,Copy_u8PinNumber );   break;
    174c:	a5 e3       	ldi	r26, 0x35	; 53
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	e5 e3       	ldi	r30, 0x35	; 53
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	48 2f       	mov	r20, r24
    1758:	8a 81       	ldd	r24, Y+2	; 0x02
    175a:	28 2f       	mov	r18, r24
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	02 2e       	mov	r0, r18
    1764:	02 c0       	rjmp	.+4      	; 0x176a <DIO_voidSetPinValue+0xfc>
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	0a 94       	dec	r0
    176c:	e2 f7       	brpl	.-8      	; 0x1766 <DIO_voidSetPinValue+0xf8>
    176e:	80 95       	com	r24
    1770:	84 23       	and	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	83 c0       	rjmp	.+262    	; 0x187c <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTD :    CLR_BIT( PORTD_REG ,Copy_u8PinNumber );   break;
    1776:	a2 e3       	ldi	r26, 0x32	; 50
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	e2 e3       	ldi	r30, 0x32	; 50
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	48 2f       	mov	r20, r24
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	02 2e       	mov	r0, r18
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <DIO_voidSetPinValue+0x126>
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	0a 94       	dec	r0
    1796:	e2 f7       	brpl	.-8      	; 0x1790 <DIO_voidSetPinValue+0x122>
    1798:	80 95       	com	r24
    179a:	84 23       	and	r24, r20
    179c:	8c 93       	st	X, r24
    179e:	6e c0       	rjmp	.+220    	; 0x187c <DIO_voidSetPinValue+0x20e>
                                default    :                                                break; 
                            }
                            break;
            case DIO_HIGH :   switch(Copy_u8PortNumber)
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	3d 83       	std	Y+5, r19	; 0x05
    17a8:	2c 83       	std	Y+4, r18	; 0x04
    17aa:	8c 81       	ldd	r24, Y+4	; 0x04
    17ac:	9d 81       	ldd	r25, Y+5	; 0x05
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	91 05       	cpc	r25, r1
    17b2:	49 f1       	breq	.+82     	; 0x1806 <DIO_voidSetPinValue+0x198>
    17b4:	2c 81       	ldd	r18, Y+4	; 0x04
    17b6:	3d 81       	ldd	r19, Y+5	; 0x05
    17b8:	22 30       	cpi	r18, 0x02	; 2
    17ba:	31 05       	cpc	r19, r1
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <DIO_voidSetPinValue+0x15a>
    17be:	8c 81       	ldd	r24, Y+4	; 0x04
    17c0:	9d 81       	ldd	r25, Y+5	; 0x05
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	61 f0       	breq	.+24     	; 0x17de <DIO_voidSetPinValue+0x170>
    17c6:	5a c0       	rjmp	.+180    	; 0x187c <DIO_voidSetPinValue+0x20e>
    17c8:	2c 81       	ldd	r18, Y+4	; 0x04
    17ca:	3d 81       	ldd	r19, Y+5	; 0x05
    17cc:	22 30       	cpi	r18, 0x02	; 2
    17ce:	31 05       	cpc	r19, r1
    17d0:	71 f1       	breq	.+92     	; 0x182e <DIO_voidSetPinValue+0x1c0>
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	9d 81       	ldd	r25, Y+5	; 0x05
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	91 05       	cpc	r25, r1
    17da:	e9 f1       	breq	.+122    	; 0x1856 <DIO_voidSetPinValue+0x1e8>
    17dc:	4f c0       	rjmp	.+158    	; 0x187c <DIO_voidSetPinValue+0x20e>
                            {
                                case DIO_PORTA :    SET_BIT( PORTA_REG ,Copy_u8PinNumber );     break;
    17de:	ab e3       	ldi	r26, 0x3B	; 59
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	eb e3       	ldi	r30, 0x3B	; 59
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	48 2f       	mov	r20, r24
    17ea:	8a 81       	ldd	r24, Y+2	; 0x02
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	02 2e       	mov	r0, r18
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_voidSetPinValue+0x18e>
    17f8:	88 0f       	add	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	0a 94       	dec	r0
    17fe:	e2 f7       	brpl	.-8      	; 0x17f8 <DIO_voidSetPinValue+0x18a>
    1800:	84 2b       	or	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	3b c0       	rjmp	.+118    	; 0x187c <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTB :    SET_BIT( PORTB_REG ,Copy_u8PinNumber );     break;
    1806:	a8 e3       	ldi	r26, 0x38	; 56
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e8 e3       	ldi	r30, 0x38	; 56
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	48 2f       	mov	r20, r24
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 2e       	mov	r0, r18
    181e:	02 c0       	rjmp	.+4      	; 0x1824 <DIO_voidSetPinValue+0x1b6>
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	0a 94       	dec	r0
    1826:	e2 f7       	brpl	.-8      	; 0x1820 <DIO_voidSetPinValue+0x1b2>
    1828:	84 2b       	or	r24, r20
    182a:	8c 93       	st	X, r24
    182c:	27 c0       	rjmp	.+78     	; 0x187c <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTC :    SET_BIT( PORTC_REG ,Copy_u8PinNumber );     break;
    182e:	a5 e3       	ldi	r26, 0x35	; 53
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e3       	ldi	r30, 0x35	; 53
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	48 2f       	mov	r20, r24
    183a:	8a 81       	ldd	r24, Y+2	; 0x02
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	02 2e       	mov	r0, r18
    1846:	02 c0       	rjmp	.+4      	; 0x184c <DIO_voidSetPinValue+0x1de>
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	0a 94       	dec	r0
    184e:	e2 f7       	brpl	.-8      	; 0x1848 <DIO_voidSetPinValue+0x1da>
    1850:	84 2b       	or	r24, r20
    1852:	8c 93       	st	X, r24
    1854:	13 c0       	rjmp	.+38     	; 0x187c <DIO_voidSetPinValue+0x20e>
                                case DIO_PORTD :    SET_BIT( PORTD_REG ,Copy_u8PinNumber );     break;
    1856:	a2 e3       	ldi	r26, 0x32	; 50
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e2 e3       	ldi	r30, 0x32	; 50
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	8a 81       	ldd	r24, Y+2	; 0x02
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <DIO_voidSetPinValue+0x206>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <DIO_voidSetPinValue+0x202>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
                            break;
            default :       break;
                            
        }
    }
}
    187c:	29 96       	adiw	r28, 0x09	; 9
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <DIO_voidSetPortValue>:

void DIO_voidSetPortValue (u8 Copy_u8PortNumber, u8 Copy_u8Value )
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <DIO_voidSetPortValue+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <DIO_voidSetPortValue+0x8>
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    189e:	89 81       	ldd	r24, Y+1	; 0x01
    18a0:	84 30       	cpi	r24, 0x04	; 4
    18a2:	90 f5       	brcc	.+100    	; 0x1908 <DIO_voidSetPortValue+0x7a>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	3c 83       	std	Y+4, r19	; 0x04
    18ac:	2b 83       	std	Y+3, r18	; 0x03
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	9c 81       	ldd	r25, Y+4	; 0x04
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	91 05       	cpc	r25, r1
    18b6:	d1 f0       	breq	.+52     	; 0x18ec <DIO_voidSetPortValue+0x5e>
    18b8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ba:	3c 81       	ldd	r19, Y+4	; 0x04
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	2c f4       	brge	.+10     	; 0x18cc <DIO_voidSetPortValue+0x3e>
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	9c 81       	ldd	r25, Y+4	; 0x04
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <DIO_voidSetPortValue+0x54>
    18ca:	1e c0       	rjmp	.+60     	; 0x1908 <DIO_voidSetPortValue+0x7a>
    18cc:	2b 81       	ldd	r18, Y+3	; 0x03
    18ce:	3c 81       	ldd	r19, Y+4	; 0x04
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	81 f0       	breq	.+32     	; 0x18f6 <DIO_voidSetPortValue+0x68>
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	9c 81       	ldd	r25, Y+4	; 0x04
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	91 05       	cpc	r25, r1
    18de:	81 f0       	breq	.+32     	; 0x1900 <DIO_voidSetPortValue+0x72>
    18e0:	13 c0       	rjmp	.+38     	; 0x1908 <DIO_voidSetPortValue+0x7a>
        {
            case DIO_PORTA: PORTA_REG = Copy_u8Value;
    18e2:	eb e3       	ldi	r30, 0x3B	; 59
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	80 83       	st	Z, r24
    18ea:	0e c0       	rjmp	.+28     	; 0x1908 <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTB: PORTB_REG = Copy_u8Value;
    18ec:	e8 e3       	ldi	r30, 0x38	; 56
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	80 83       	st	Z, r24
    18f4:	09 c0       	rjmp	.+18     	; 0x1908 <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTC: PORTC_REG = Copy_u8Value;
    18f6:	e5 e3       	ldi	r30, 0x35	; 53
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	8a 81       	ldd	r24, Y+2	; 0x02
    18fc:	80 83       	st	Z, r24
    18fe:	04 c0       	rjmp	.+8      	; 0x1908 <DIO_voidSetPortValue+0x7a>
                        break;
    
            case DIO_PORTD: PORTD_REG = Copy_u8Value;
    1900:	e2 e3       	ldi	r30, 0x32	; 50
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	80 83       	st	Z, r24
                        break;
            default:
                        break;
        }
    }
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	00 d0       	rcall	.+0      	; 0x191c <DIO_u8GetPinValue+0x6>
    191c:	00 d0       	rcall	.+0      	; 0x191e <DIO_u8GetPinValue+0x8>
    191e:	0f 92       	push	r0
    1920:	cd b7       	in	r28, 0x3d	; 61
    1922:	de b7       	in	r29, 0x3e	; 62
    1924:	8a 83       	std	Y+2, r24	; 0x02
    1926:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	84 30       	cpi	r24, 0x04	; 4
    192c:	08 f0       	brcs	.+2      	; 0x1930 <DIO_u8GetPinValue+0x1a>
    192e:	9d c0       	rjmp	.+314    	; 0x1a6a <DIO_u8GetPinValue+0x154>
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	88 30       	cpi	r24, 0x08	; 8
    1934:	08 f0       	brcs	.+2      	; 0x1938 <DIO_u8GetPinValue+0x22>
    1936:	99 c0       	rjmp	.+306    	; 0x1a6a <DIO_u8GetPinValue+0x154>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	3d 83       	std	Y+5, r19	; 0x05
    1940:	2c 83       	std	Y+4, r18	; 0x04
    1942:	4c 81       	ldd	r20, Y+4	; 0x04
    1944:	5d 81       	ldd	r21, Y+5	; 0x05
    1946:	41 30       	cpi	r20, 0x01	; 1
    1948:	51 05       	cpc	r21, r1
    194a:	b1 f1       	breq	.+108    	; 0x19b8 <DIO_u8GetPinValue+0xa2>
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	9d 81       	ldd	r25, Y+5	; 0x05
    1950:	82 30       	cpi	r24, 0x02	; 2
    1952:	91 05       	cpc	r25, r1
    1954:	34 f4       	brge	.+12     	; 0x1962 <DIO_u8GetPinValue+0x4c>
    1956:	2c 81       	ldd	r18, Y+4	; 0x04
    1958:	3d 81       	ldd	r19, Y+5	; 0x05
    195a:	21 15       	cp	r18, r1
    195c:	31 05       	cpc	r19, r1
    195e:	71 f0       	breq	.+28     	; 0x197c <DIO_u8GetPinValue+0x66>
    1960:	84 c0       	rjmp	.+264    	; 0x1a6a <DIO_u8GetPinValue+0x154>
    1962:	4c 81       	ldd	r20, Y+4	; 0x04
    1964:	5d 81       	ldd	r21, Y+5	; 0x05
    1966:	42 30       	cpi	r20, 0x02	; 2
    1968:	51 05       	cpc	r21, r1
    196a:	09 f4       	brne	.+2      	; 0x196e <DIO_u8GetPinValue+0x58>
    196c:	43 c0       	rjmp	.+134    	; 0x19f4 <DIO_u8GetPinValue+0xde>
    196e:	8c 81       	ldd	r24, Y+4	; 0x04
    1970:	9d 81       	ldd	r25, Y+5	; 0x05
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	09 f4       	brne	.+2      	; 0x197a <DIO_u8GetPinValue+0x64>
    1978:	5b c0       	rjmp	.+182    	; 0x1a30 <DIO_u8GetPinValue+0x11a>
    197a:	77 c0       	rjmp	.+238    	; 0x1a6a <DIO_u8GetPinValue+0x154>
        {
            case DIO_PORTA :    Local_u8Variable = GET_BIT( PINA_REG ,Copy_u8PinNumber );   break;   
    197c:	e9 e3       	ldi	r30, 0x39	; 57
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	48 2f       	mov	r20, r24
    1984:	50 e0       	ldi	r21, 0x00	; 0
    1986:	8b 81       	ldd	r24, Y+3	; 0x03
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <DIO_u8GetPinValue+0x80>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	2a 95       	dec	r18
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <DIO_u8GetPinValue+0x7c>
    199a:	9a 01       	movw	r18, r20
    199c:	28 23       	and	r18, r24
    199e:	39 23       	and	r19, r25
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a9 01       	movw	r20, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_u8GetPinValue+0x98>
    19aa:	55 95       	asr	r21
    19ac:	47 95       	ror	r20
    19ae:	8a 95       	dec	r24
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_u8GetPinValue+0x94>
    19b2:	ca 01       	movw	r24, r20
    19b4:	89 83       	std	Y+1, r24	; 0x01
    19b6:	59 c0       	rjmp	.+178    	; 0x1a6a <DIO_u8GetPinValue+0x154>
            case DIO_PORTB :    Local_u8Variable = GET_BIT( PINB_REG ,Copy_u8PinNumber );   break;
    19b8:	e6 e3       	ldi	r30, 0x36	; 54
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	48 2f       	mov	r20, r24
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	8b 81       	ldd	r24, Y+3	; 0x03
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_u8GetPinValue+0xbc>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	2a 95       	dec	r18
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_u8GetPinValue+0xb8>
    19d6:	9a 01       	movw	r18, r20
    19d8:	28 23       	and	r18, r24
    19da:	39 23       	and	r19, r25
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	a9 01       	movw	r20, r18
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <DIO_u8GetPinValue+0xd4>
    19e6:	55 95       	asr	r21
    19e8:	47 95       	ror	r20
    19ea:	8a 95       	dec	r24
    19ec:	e2 f7       	brpl	.-8      	; 0x19e6 <DIO_u8GetPinValue+0xd0>
    19ee:	ca 01       	movw	r24, r20
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	3b c0       	rjmp	.+118    	; 0x1a6a <DIO_u8GetPinValue+0x154>
            case DIO_PORTC :    Local_u8Variable = GET_BIT( PINC_REG ,Copy_u8PinNumber );   break;
    19f4:	e3 e3       	ldi	r30, 0x33	; 51
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	48 2f       	mov	r20, r24
    19fc:	50 e0       	ldi	r21, 0x00	; 0
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <DIO_u8GetPinValue+0xf8>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	2a 95       	dec	r18
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <DIO_u8GetPinValue+0xf4>
    1a12:	9a 01       	movw	r18, r20
    1a14:	28 23       	and	r18, r24
    1a16:	39 23       	and	r19, r25
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	88 2f       	mov	r24, r24
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	a9 01       	movw	r20, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <DIO_u8GetPinValue+0x110>
    1a22:	55 95       	asr	r21
    1a24:	47 95       	ror	r20
    1a26:	8a 95       	dec	r24
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <DIO_u8GetPinValue+0x10c>
    1a2a:	ca 01       	movw	r24, r20
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	1d c0       	rjmp	.+58     	; 0x1a6a <DIO_u8GetPinValue+0x154>
            case DIO_PORTD :    Local_u8Variable = GET_BIT( PIND_REG ,Copy_u8PinNumber );   break;
    1a30:	e0 e3       	ldi	r30, 0x30	; 48
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	48 2f       	mov	r20, r24
    1a38:	50 e0       	ldi	r21, 0x00	; 0
    1a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 c0       	rjmp	.+4      	; 0x1a4a <DIO_u8GetPinValue+0x134>
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	2a 95       	dec	r18
    1a4c:	e2 f7       	brpl	.-8      	; 0x1a46 <DIO_u8GetPinValue+0x130>
    1a4e:	9a 01       	movw	r18, r20
    1a50:	28 23       	and	r18, r24
    1a52:	39 23       	and	r19, r25
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	88 2f       	mov	r24, r24
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a9 01       	movw	r20, r18
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <DIO_u8GetPinValue+0x14c>
    1a5e:	55 95       	asr	r21
    1a60:	47 95       	ror	r20
    1a62:	8a 95       	dec	r24
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <DIO_u8GetPinValue+0x148>
    1a66:	ca 01       	movw	r24, r20
    1a68:	89 83       	std	Y+1, r24	; 0x01
            default :                                                                   break;
        }
    }
    return Local_u8Variable ;
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a6c:	0f 90       	pop	r0
    1a6e:	0f 90       	pop	r0
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	08 95       	ret

00001a7c <DIO_u8GetPortValue>:


u8 DIO_u8GetPortValue (u8 Copy_u8PortNumber )
{
    1a7c:	df 93       	push	r29
    1a7e:	cf 93       	push	r28
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <DIO_u8GetPortValue+0x6>
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <DIO_u8GetPortValue+0x8>
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	8a 83       	std	Y+2, r24	; 0x02
    u8 Local_u8Variable;
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	84 30       	cpi	r24, 0x04	; 4
    1a8e:	90 f5       	brcc	.+100    	; 0x1af4 <DIO_u8GetPortValue+0x78>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	3c 83       	std	Y+4, r19	; 0x04
    1a98:	2b 83       	std	Y+3, r18	; 0x03
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9e:	81 30       	cpi	r24, 0x01	; 1
    1aa0:	91 05       	cpc	r25, r1
    1aa2:	d1 f0       	breq	.+52     	; 0x1ad8 <DIO_u8GetPortValue+0x5c>
    1aa4:	2b 81       	ldd	r18, Y+3	; 0x03
    1aa6:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa8:	22 30       	cpi	r18, 0x02	; 2
    1aaa:	31 05       	cpc	r19, r1
    1aac:	2c f4       	brge	.+10     	; 0x1ab8 <DIO_u8GetPortValue+0x3c>
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <DIO_u8GetPortValue+0x52>
    1ab6:	1e c0       	rjmp	.+60     	; 0x1af4 <DIO_u8GetPortValue+0x78>
    1ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aba:	3c 81       	ldd	r19, Y+4	; 0x04
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	31 05       	cpc	r19, r1
    1ac0:	81 f0       	breq	.+32     	; 0x1ae2 <DIO_u8GetPortValue+0x66>
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	83 30       	cpi	r24, 0x03	; 3
    1ac8:	91 05       	cpc	r25, r1
    1aca:	81 f0       	breq	.+32     	; 0x1aec <DIO_u8GetPortValue+0x70>
    1acc:	13 c0       	rjmp	.+38     	; 0x1af4 <DIO_u8GetPortValue+0x78>
        {
            case DIO_PORTA :    Local_u8Variable = PINA_REG ;   break;  
    1ace:	e9 e3       	ldi	r30, 0x39	; 57
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	80 81       	ld	r24, Z
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	0e c0       	rjmp	.+28     	; 0x1af4 <DIO_u8GetPortValue+0x78>
            case DIO_PORTB :    Local_u8Variable = PINB_REG ;   break;
    1ad8:	e6 e3       	ldi	r30, 0x36	; 54
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	09 c0       	rjmp	.+18     	; 0x1af4 <DIO_u8GetPortValue+0x78>
            case DIO_PORTC :    Local_u8Variable = PINC_REG ;   break;
    1ae2:	e3 e3       	ldi	r30, 0x33	; 51
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	04 c0       	rjmp	.+8      	; 0x1af4 <DIO_u8GetPortValue+0x78>
            case DIO_PORTD :    Local_u8Variable = PIND_REG ;   break;
    1aec:	e0 e3       	ldi	r30, 0x30	; 48
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	89 83       	std	Y+1, r24	; 0x01
            default    :                                    break;
        }
    }
    return Local_u8Variable ;
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <DIO_voidTogglePinValue>:


void DIO_voidTogglePinValue (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber )
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <DIO_voidTogglePinValue+0x6>
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <DIO_voidTogglePinValue+0x8>
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	84 30       	cpi	r24, 0x04	; 4
    1b18:	08 f0       	brcs	.+2      	; 0x1b1c <DIO_voidTogglePinValue+0x18>
    1b1a:	72 c0       	rjmp	.+228    	; 0x1c00 <DIO_voidTogglePinValue+0xfc>
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	88 30       	cpi	r24, 0x08	; 8
    1b20:	08 f0       	brcs	.+2      	; 0x1b24 <DIO_voidTogglePinValue+0x20>
    1b22:	6e c0       	rjmp	.+220    	; 0x1c00 <DIO_voidTogglePinValue+0xfc>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8PortNumber)
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	3c 83       	std	Y+4, r19	; 0x04
    1b2c:	2b 83       	std	Y+3, r18	; 0x03
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	81 30       	cpi	r24, 0x01	; 1
    1b34:	91 05       	cpc	r25, r1
    1b36:	49 f1       	breq	.+82     	; 0x1b8a <DIO_voidTogglePinValue+0x86>
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	22 30       	cpi	r18, 0x02	; 2
    1b3e:	31 05       	cpc	r19, r1
    1b40:	2c f4       	brge	.+10     	; 0x1b4c <DIO_voidTogglePinValue+0x48>
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	9c 81       	ldd	r25, Y+4	; 0x04
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	61 f0       	breq	.+24     	; 0x1b62 <DIO_voidTogglePinValue+0x5e>
    1b4a:	5a c0       	rjmp	.+180    	; 0x1c00 <DIO_voidTogglePinValue+0xfc>
    1b4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b50:	22 30       	cpi	r18, 0x02	; 2
    1b52:	31 05       	cpc	r19, r1
    1b54:	71 f1       	breq	.+92     	; 0x1bb2 <DIO_voidTogglePinValue+0xae>
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	83 30       	cpi	r24, 0x03	; 3
    1b5c:	91 05       	cpc	r25, r1
    1b5e:	e9 f1       	breq	.+122    	; 0x1bda <DIO_voidTogglePinValue+0xd6>
    1b60:	4f c0       	rjmp	.+158    	; 0x1c00 <DIO_voidTogglePinValue+0xfc>
        {
            case DIO_PORTA :    TOG_BIT( PORTA_REG, Copy_u8PinNumber );     break;
    1b62:	ab e3       	ldi	r26, 0x3B	; 59
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	eb e3       	ldi	r30, 0x3B	; 59
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	28 2f       	mov	r18, r24
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	02 2e       	mov	r0, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_voidTogglePinValue+0x7c>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	0a 94       	dec	r0
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <DIO_voidTogglePinValue+0x78>
    1b84:	84 27       	eor	r24, r20
    1b86:	8c 93       	st	X, r24
    1b88:	3b c0       	rjmp	.+118    	; 0x1c00 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTB :    TOG_BIT( PORTB_REG, Copy_u8PinNumber );     break;
    1b8a:	a8 e3       	ldi	r26, 0x38	; 56
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e8 e3       	ldi	r30, 0x38	; 56
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	48 2f       	mov	r20, r24
    1b96:	8a 81       	ldd	r24, Y+2	; 0x02
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <DIO_voidTogglePinValue+0xa4>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <DIO_voidTogglePinValue+0xa0>
    1bac:	84 27       	eor	r24, r20
    1bae:	8c 93       	st	X, r24
    1bb0:	27 c0       	rjmp	.+78     	; 0x1c00 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTC :    TOG_BIT( PORTC_REG, Copy_u8PinNumber );     break;
    1bb2:	a5 e3       	ldi	r26, 0x35	; 53
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e5 e3       	ldi	r30, 0x35	; 53
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	02 2e       	mov	r0, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <DIO_voidTogglePinValue+0xcc>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	0a 94       	dec	r0
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <DIO_voidTogglePinValue+0xc8>
    1bd4:	84 27       	eor	r24, r20
    1bd6:	8c 93       	st	X, r24
    1bd8:	13 c0       	rjmp	.+38     	; 0x1c00 <DIO_voidTogglePinValue+0xfc>
            case DIO_PORTD :    TOG_BIT( PORTD_REG, Copy_u8PinNumber );     break;
    1bda:	a2 e3       	ldi	r26, 0x32	; 50
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e2 e3       	ldi	r30, 0x32	; 50
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	48 2f       	mov	r20, r24
    1be6:	8a 81       	ldd	r24, Y+2	; 0x02
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 2e       	mov	r0, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_voidTogglePinValue+0xf4>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	0a 94       	dec	r0
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_voidTogglePinValue+0xf0>
    1bfc:	84 27       	eor	r24, r20
    1bfe:	8c 93       	st	X, r24
            default :                                                      break;
        }
    }
}
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	0f 90       	pop	r0
    1c08:	cf 91       	pop	r28
    1c0a:	df 91       	pop	r29
    1c0c:	08 95       	ret

00001c0e <DIO_voidTogglePortValue>:


void DIO_voidTogglePortValue (u8 Copy_u8PortNumber )
{
    1c0e:	df 93       	push	r29
    1c10:	cf 93       	push	r28
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <DIO_voidTogglePortValue+0x6>
    1c14:	0f 92       	push	r0
    1c16:	cd b7       	in	r28, 0x3d	; 61
    1c18:	de b7       	in	r29, 0x3e	; 62
    1c1a:	89 83       	std	Y+1, r24	; 0x01
        /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	84 30       	cpi	r24, 0x04	; 4
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <DIO_voidTogglePortValue+0x16>
    1c22:	3e c0       	rjmp	.+124    	; 0x1ca0 <DIO_voidTogglePortValue+0x92>
    {
        // Do Nothing
    }
    else 
    {
        switch(Copy_u8PortNumber)
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	3b 83       	std	Y+3, r19	; 0x03
    1c2c:	2a 83       	std	Y+2, r18	; 0x02
    1c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c30:	9b 81       	ldd	r25, Y+3	; 0x03
    1c32:	81 30       	cpi	r24, 0x01	; 1
    1c34:	91 05       	cpc	r25, r1
    1c36:	e9 f0       	breq	.+58     	; 0x1c72 <DIO_voidTogglePortValue+0x64>
    1c38:	2a 81       	ldd	r18, Y+2	; 0x02
    1c3a:	3b 81       	ldd	r19, Y+3	; 0x03
    1c3c:	22 30       	cpi	r18, 0x02	; 2
    1c3e:	31 05       	cpc	r19, r1
    1c40:	2c f4       	brge	.+10     	; 0x1c4c <DIO_voidTogglePortValue+0x3e>
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	9b 81       	ldd	r25, Y+3	; 0x03
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	61 f0       	breq	.+24     	; 0x1c62 <DIO_voidTogglePortValue+0x54>
    1c4a:	2a c0       	rjmp	.+84     	; 0x1ca0 <DIO_voidTogglePortValue+0x92>
    1c4c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c4e:	3b 81       	ldd	r19, Y+3	; 0x03
    1c50:	22 30       	cpi	r18, 0x02	; 2
    1c52:	31 05       	cpc	r19, r1
    1c54:	b1 f0       	breq	.+44     	; 0x1c82 <DIO_voidTogglePortValue+0x74>
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5a:	83 30       	cpi	r24, 0x03	; 3
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	c9 f0       	breq	.+50     	; 0x1c92 <DIO_voidTogglePortValue+0x84>
    1c60:	1f c0       	rjmp	.+62     	; 0x1ca0 <DIO_voidTogglePortValue+0x92>
        {
            case DIO_PORTA :    PORTA_REG ^= 0xff ;     break;           
    1c62:	ab e3       	ldi	r26, 0x3B	; 59
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	eb e3       	ldi	r30, 0x3B	; 59
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 95       	com	r24
    1c6e:	8c 93       	st	X, r24
    1c70:	17 c0       	rjmp	.+46     	; 0x1ca0 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTB :    PORTB_REG ^= 0xff ;     break;          
    1c72:	a8 e3       	ldi	r26, 0x38	; 56
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e8 e3       	ldi	r30, 0x38	; 56
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	80 95       	com	r24
    1c7e:	8c 93       	st	X, r24
    1c80:	0f c0       	rjmp	.+30     	; 0x1ca0 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTC :    PORTC_REG ^= 0xff ;     break; 
    1c82:	a5 e3       	ldi	r26, 0x35	; 53
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e5 e3       	ldi	r30, 0x35	; 53
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	80 95       	com	r24
    1c8e:	8c 93       	st	X, r24
    1c90:	07 c0       	rjmp	.+14     	; 0x1ca0 <DIO_voidTogglePortValue+0x92>
            case DIO_PORTD :    PORTD_REG ^= 0xff ;     break; 
    1c92:	a2 e3       	ldi	r26, 0x32	; 50
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	e2 e3       	ldi	r30, 0x32	; 50
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	80 95       	com	r24
    1c9e:	8c 93       	st	X, r24
            default    :                            break;
        }
    }
}
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <DIO_voidConfig_Pull_Up_Pin>:

void DIO_voidConfig_Pull_Up_Pin (u8 Copy_u8PortNumber, u8 Copy_u8PinNumber , u8 Copy_u8PullUpStatus )
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <DIO_voidConfig_Pull_Up_Pin+0x6>
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <DIO_voidConfig_Pull_Up_Pin+0x8>
    1cb4:	0f 92       	push	r0
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	89 83       	std	Y+1, r24	; 0x01
    1cbc:	6a 83       	std	Y+2, r22	; 0x02
    1cbe:	4b 83       	std	Y+3, r20	; 0x03
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD || Copy_u8PinNumber > DIO_PIN7 )
    1cc0:	89 81       	ldd	r24, Y+1	; 0x01
    1cc2:	84 30       	cpi	r24, 0x04	; 4
    1cc4:	e0 f4       	brcc	.+56     	; 0x1cfe <DIO_voidConfig_Pull_Up_Pin+0x52>
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	88 30       	cpi	r24, 0x08	; 8
    1cca:	c8 f4       	brcc	.+50     	; 0x1cfe <DIO_voidConfig_Pull_Up_Pin+0x52>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	3d 83       	std	Y+5, r19	; 0x05
    1cd4:	2c 83       	std	Y+4, r18	; 0x04
    1cd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	59 f0       	breq	.+22     	; 0x1cf4 <DIO_voidConfig_Pull_Up_Pin+0x48>
    1cde:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce2:	21 30       	cpi	r18, 0x01	; 1
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	59 f4       	brne	.+22     	; 0x1cfe <DIO_voidConfig_Pull_Up_Pin+0x52>
       {
            case DIO_ON  :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, DIO_HIGH );   break;
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	6a 81       	ldd	r22, Y+2	; 0x02
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
    1cf2:	05 c0       	rjmp	.+10     	; 0x1cfe <DIO_voidConfig_Pull_Up_Pin+0x52>
            case DIO_OFF :   DIO_voidSetPinValue (Copy_u8PortNumber,Copy_u8PinNumber, DIO_LOW  );   break;
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	6a 81       	ldd	r22, Y+2	; 0x02
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
            default  :                                                                      break;
       }
    }
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	0f 90       	pop	r0
    1d08:	cf 91       	pop	r28
    1d0a:	df 91       	pop	r29
    1d0c:	08 95       	ret

00001d0e <DIO_voidConfig_Pull_Up_Port>:

void DIO_voidConfig_Pull_Up_Port (u8 Copy_u8PortNumber, u8 Copy_u8PullUpStatus )
{
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <DIO_voidConfig_Pull_Up_Port+0x6>
    1d14:	00 d0       	rcall	.+0      	; 0x1d16 <DIO_voidConfig_Pull_Up_Port+0x8>
    1d16:	cd b7       	in	r28, 0x3d	; 61
    1d18:	de b7       	in	r29, 0x3e	; 62
    1d1a:	89 83       	std	Y+1, r24	; 0x01
    1d1c:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8PortNumber > DIO_PORTD )
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	84 30       	cpi	r24, 0x04	; 4
    1d22:	b8 f4       	brcc	.+46     	; 0x1d52 <DIO_voidConfig_Pull_Up_Port+0x44>
    {
        // Do Nothing
    }
    else
    {
       switch(Copy_u8PullUpStatus)
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	28 2f       	mov	r18, r24
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	3c 83       	std	Y+4, r19	; 0x04
    1d2c:	2b 83       	std	Y+3, r18	; 0x03
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	9c 81       	ldd	r25, Y+4	; 0x04
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	51 f0       	breq	.+20     	; 0x1d4a <DIO_voidConfig_Pull_Up_Port+0x3c>
    1d36:	2b 81       	ldd	r18, Y+3	; 0x03
    1d38:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3a:	21 30       	cpi	r18, 0x01	; 1
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	49 f4       	brne	.+18     	; 0x1d52 <DIO_voidConfig_Pull_Up_Port+0x44>
       {
            case DIO_ON :  DIO_voidSetPortValue (Copy_u8PortNumber, DIO_HIGH );  break;
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	61 e0       	ldi	r22, 0x01	; 1
    1d44:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidSetPortValue>
    1d48:	04 c0       	rjmp	.+8      	; 0x1d52 <DIO_voidConfig_Pull_Up_Port+0x44>
            case DIO_OFF:  DIO_voidSetPortValue (Copy_u8PortNumber, DIO_LOW );   break;
    1d4a:	89 81       	ldd	r24, Y+1	; 0x01
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidSetPortValue>
            default :                                                    break;
       }
    }
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <ADC_voidInit>:

u16 ADC_u16Result = 0 ;
u8 ADC_u18BusyFlag = 0 ;

void ADC_voidInit (void)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62

    #if ( REFERENCE_VOLTAGE == AREF )
        CLR_BIT(ADMUX_REG,ADMUX_REFS0);
        CLR_BIT(ADMUX_REG,ADMUX_REFS1);
    #elif ( REFERENCE_VOLTAGE == AVCC )
      SET_BIT(ADMUX_REG,ADMUX_REFS0);
    1d68:	a7 e2       	ldi	r26, 0x27	; 39
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	e7 e2       	ldi	r30, 0x27	; 39
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	80 81       	ld	r24, Z
    1d72:	80 64       	ori	r24, 0x40	; 64
    1d74:	8c 93       	st	X, r24
        CLR_BIT(ADMUX_REG,ADMUX_REFS1);
    1d76:	a7 e2       	ldi	r26, 0x27	; 39
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e7 e2       	ldi	r30, 0x27	; 39
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	8f 77       	andi	r24, 0x7F	; 127
    1d82:	8c 93       	st	X, r24
    #endif

/*     Select RIGHT or LEFT Adjust      */

    #if ( ADJUST == RIGHT )
        CLR_BIT(ADMUX_REG,ADMUX_ADLAR);
    1d84:	a7 e2       	ldi	r26, 0x27	; 39
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e7 e2       	ldi	r30, 0x27	; 39
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 7d       	andi	r24, 0xDF	; 223
    1d90:	8c 93       	st	X, r24
    #endif

/*        ADC Enable or Disable         */

    #if ( ADEN == ENABLE )
      SET_BIT(ADCSRA_REG,ADCSRA_ADEN);
    1d92:	a6 e2       	ldi	r26, 0x26	; 38
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e6 e2       	ldi	r30, 0x26	; 38
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 68       	ori	r24, 0x80	; 128
    1d9e:	8c 93       	st	X, r24
            SET_BIT(SFIOR_REG,SFIOR_ADTS1);
            SET_BIT(SFIOR_REG,SFIOR_ADTS2);
        #endif

    #elif ( ADATE == DISABLE )
        CLR_BIT(ADCSRA_REG,ADCSRA_ADATE);
    1da0:	a6 e2       	ldi	r26, 0x26	; 38
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e6 e2       	ldi	r30, 0x26	; 38
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	8f 7d       	andi	r24, 0xDF	; 223
    1dac:	8c 93       	st	X, r24
/*    ADC Interrupt Enable or Disable   */

    #if ( ADIE == ENABLE )          // work with Interrupt
        SET_BIT(ADCSRA_REG,ADCSRA_ADIE);
    #elif ( ADIE == DISABLE )       // work with Polling
        CLR_BIT(ADCSRA_REG,ADCSRA_ADIE);
    1dae:	a6 e2       	ldi	r26, 0x26	; 38
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	e6 e2       	ldi	r30, 0x26	; 38
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	87 7f       	andi	r24, 0xF7	; 247
    1dba:	8c 93       	st	X, r24
    #endif

/*       ADC Prescaler Selection        */

    /*     Clear Prescaler      */ 
    ADCSRA_REG = ( ADCSRA_REG & 0b11111000 );
    1dbc:	a6 e2       	ldi	r26, 0x26	; 38
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	e6 e2       	ldi	r30, 0x26	; 38
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	88 7f       	andi	r24, 0xF8	; 248
    1dc8:	8c 93       	st	X, r24
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_64 )
        CLR_BIT(ADCSRA_REG,ADCSRA_ADPS0);
        SET_BIT(ADCSRA_REG,ADCSRA_ADPS1);
        SET_BIT(ADCSRA_REG,ADCSRA_ADPS2);
    #elif ( PRESCALER == PRESCALER_DIVISION_BY_128 )
        SET_BIT(ADCSRA_REG,ADCSRA_ADPS0);
    1dca:	a6 e2       	ldi	r26, 0x26	; 38
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e6 e2       	ldi	r30, 0x26	; 38
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	81 60       	ori	r24, 0x01	; 1
    1dd6:	8c 93       	st	X, r24
        SET_BIT(ADCSRA_REG,ADCSRA_ADPS1);
    1dd8:	a6 e2       	ldi	r26, 0x26	; 38
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e6 e2       	ldi	r30, 0x26	; 38
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	82 60       	ori	r24, 0x02	; 2
    1de4:	8c 93       	st	X, r24
        SET_BIT(ADCSRA_REG,ADCSRA_ADPS2);
    1de6:	a6 e2       	ldi	r26, 0x26	; 38
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e6 e2       	ldi	r30, 0x26	; 38
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	84 60       	ori	r24, 0x04	; 4
    1df2:	8c 93       	st	X, r24
    #endif

}
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <ADC_u16ReadSynchronus>:

u16 ADC_u16ReadSynchronus ( u8 Copy_u8ChannelNumber ) 
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	00 d0       	rcall	.+0      	; 0x1e00 <ADC_u16ReadSynchronus+0x6>
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <ADC_u16ReadSynchronus+0x8>
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	8a 83       	std	Y+2, r24	; 0x02

    /*     Clear MUX      */ 
    ADMUX_REG = ( ADMUX_REG & 0b11100000 );        
    1e08:	a7 e2       	ldi	r26, 0x27	; 39
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e7 e2       	ldi	r30, 0x27	; 39
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	80 7e       	andi	r24, 0xE0	; 224
    1e14:	8c 93       	st	X, r24

    /*   Select channel   */ 
    switch ( Copy_u8ChannelNumber )
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	3c 83       	std	Y+4, r19	; 0x04
    1e1e:	2b 83       	std	Y+3, r18	; 0x03
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	9c 81       	ldd	r25, Y+4	; 0x04
    1e24:	83 30       	cpi	r24, 0x03	; 3
    1e26:	91 05       	cpc	r25, r1
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <ADC_u16ReadSynchronus+0x32>
    1e2a:	45 c0       	rjmp	.+138    	; 0x1eb6 <ADC_u16ReadSynchronus+0xbc>
    1e2c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e30:	24 30       	cpi	r18, 0x04	; 4
    1e32:	31 05       	cpc	r19, r1
    1e34:	7c f4       	brge	.+30     	; 0x1e54 <ADC_u16ReadSynchronus+0x5a>
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	91 05       	cpc	r25, r1
    1e3e:	49 f1       	breq	.+82     	; 0x1e92 <ADC_u16ReadSynchronus+0x98>
    1e40:	2b 81       	ldd	r18, Y+3	; 0x03
    1e42:	3c 81       	ldd	r19, Y+4	; 0x04
    1e44:	22 30       	cpi	r18, 0x02	; 2
    1e46:	31 05       	cpc	r19, r1
    1e48:	6c f5       	brge	.+90     	; 0x1ea4 <ADC_u16ReadSynchronus+0xaa>
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	c1 f0       	breq	.+48     	; 0x1e82 <ADC_u16ReadSynchronus+0x88>
    1e52:	5d c0       	rjmp	.+186    	; 0x1f0e <ADC_u16ReadSynchronus+0x114>
    1e54:	2b 81       	ldd	r18, Y+3	; 0x03
    1e56:	3c 81       	ldd	r19, Y+4	; 0x04
    1e58:	25 30       	cpi	r18, 0x05	; 5
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <ADC_u16ReadSynchronus+0x66>
    1e5e:	3d c0       	rjmp	.+122    	; 0x1eda <ADC_u16ReadSynchronus+0xe0>
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	85 30       	cpi	r24, 0x05	; 5
    1e66:	91 05       	cpc	r25, r1
    1e68:	7c f1       	brlt	.+94     	; 0x1ec8 <ADC_u16ReadSynchronus+0xce>
    1e6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6e:	26 30       	cpi	r18, 0x06	; 6
    1e70:	31 05       	cpc	r19, r1
    1e72:	e1 f1       	breq	.+120    	; 0x1eec <ADC_u16ReadSynchronus+0xf2>
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	87 30       	cpi	r24, 0x07	; 7
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <ADC_u16ReadSynchronus+0x86>
    1e7e:	3f c0       	rjmp	.+126    	; 0x1efe <ADC_u16ReadSynchronus+0x104>
    1e80:	46 c0       	rjmp	.+140    	; 0x1f0e <ADC_u16ReadSynchronus+0x114>
    {
        case ADC0 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000000 );     break;
    1e82:	a7 e2       	ldi	r26, 0x27	; 39
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e7 e2       	ldi	r30, 0x27	; 39
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	80 7e       	andi	r24, 0xE0	; 224
    1e8e:	8c 93       	st	X, r24
    1e90:	3e c0       	rjmp	.+124    	; 0x1f0e <ADC_u16ReadSynchronus+0x114>
        case ADC1 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000001 );     break;
    1e92:	a7 e2       	ldi	r26, 0x27	; 39
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e7 e2       	ldi	r30, 0x27	; 39
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	80 7e       	andi	r24, 0xE0	; 224
    1e9e:	81 60       	ori	r24, 0x01	; 1
    1ea0:	8c 93       	st	X, r24
    1ea2:	35 c0       	rjmp	.+106    	; 0x1f0e <ADC_u16ReadSynchronus+0x114>
        case ADC2 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000010 );     break;        
    1ea4:	a7 e2       	ldi	r26, 0x27	; 39
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e7 e2       	ldi	r30, 0x27	; 39
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	80 7e       	andi	r24, 0xE0	; 224
    1eb0:	82 60       	ori	r24, 0x02	; 2
    1eb2:	8c 93       	st	X, r24
    1eb4:	2c c0       	rjmp	.+88     	; 0x1f0e <ADC_u16ReadSynchronus+0x114>
        case ADC3 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000011 );     break;
    1eb6:	a7 e2       	ldi	r26, 0x27	; 39
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e7 e2       	ldi	r30, 0x27	; 39
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 7e       	andi	r24, 0xE0	; 224
    1ec2:	83 60       	ori	r24, 0x03	; 3
    1ec4:	8c 93       	st	X, r24
    1ec6:	23 c0       	rjmp	.+70     	; 0x1f0e <ADC_u16ReadSynchronus+0x114>
        case ADC4 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000100 );     break;
    1ec8:	a7 e2       	ldi	r26, 0x27	; 39
    1eca:	b0 e0       	ldi	r27, 0x00	; 0
    1ecc:	e7 e2       	ldi	r30, 0x27	; 39
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	80 81       	ld	r24, Z
    1ed2:	80 7e       	andi	r24, 0xE0	; 224
    1ed4:	84 60       	ori	r24, 0x04	; 4
    1ed6:	8c 93       	st	X, r24
    1ed8:	1a c0       	rjmp	.+52     	; 0x1f0e <ADC_u16ReadSynchronus+0x114>
        case ADC5 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000101 );     break;
    1eda:	a7 e2       	ldi	r26, 0x27	; 39
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e7 e2       	ldi	r30, 0x27	; 39
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	80 7e       	andi	r24, 0xE0	; 224
    1ee6:	85 60       	ori	r24, 0x05	; 5
    1ee8:	8c 93       	st	X, r24
    1eea:	11 c0       	rjmp	.+34     	; 0x1f0e <ADC_u16ReadSynchronus+0x114>
        case ADC6 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000110 );     break;
    1eec:	a7 e2       	ldi	r26, 0x27	; 39
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e7 e2       	ldi	r30, 0x27	; 39
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 7e       	andi	r24, 0xE0	; 224
    1ef8:	86 60       	ori	r24, 0x06	; 6
    1efa:	8c 93       	st	X, r24
    1efc:	08 c0       	rjmp	.+16     	; 0x1f0e <ADC_u16ReadSynchronus+0x114>
        case ADC7 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000111 );     break;
    1efe:	a7 e2       	ldi	r26, 0x27	; 39
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e7 e2       	ldi	r30, 0x27	; 39
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	80 7e       	andi	r24, 0xE0	; 224
    1f0a:	87 60       	ori	r24, 0x07	; 7
    1f0c:	8c 93       	st	X, r24
 
    /*    Start Conversion    */ 
    #if ( ADATE == ENABLE )
        // Start Conversion When Triggering Occures.
    #elif ( ADATE == DISABLE )
      SET_BIT(ADCSRA_REG,ADCSRA_ADSC);
    1f0e:	a6 e2       	ldi	r26, 0x26	; 38
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e6 e2       	ldi	r30, 0x26	; 38
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	80 64       	ori	r24, 0x40	; 64
    1f1a:	8c 93       	st	X, r24
    // work with Interrupt
    #if ( ADIE == ENABLE )                        
    // When ADC Finish conversion will Raising Interrupt Flag and Jump to ADC_ISR Function.    
    #elif ( ADIE == DISABLE )                     // work with Polling
        /* GET FLAG and Polling the Flag */
        u8 ADIF=0 ;
    1f1c:	19 82       	std	Y+1, r1	; 0x01
    1f1e:	10 c0       	rjmp	.+32     	; 0x1f40 <ADC_u16ReadSynchronus+0x146>
        while( ADIF == 0 )
        {
            ADIF = GET_BIT(ADCSRA_REG,ADCSRA_ADIF);    // Stuck on while untill Flag Raising 1 .
    1f20:	e6 e2       	ldi	r30, 0x26	; 38
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	88 2f       	mov	r24, r24
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	80 71       	andi	r24, 0x10	; 16
    1f2c:	90 70       	andi	r25, 0x00	; 0
    1f2e:	95 95       	asr	r25
    1f30:	87 95       	ror	r24
    1f32:	95 95       	asr	r25
    1f34:	87 95       	ror	r24
    1f36:	95 95       	asr	r25
    1f38:	87 95       	ror	r24
    1f3a:	95 95       	asr	r25
    1f3c:	87 95       	ror	r24
    1f3e:	89 83       	std	Y+1, r24	; 0x01
    #if ( ADIE == ENABLE )                        
    // When ADC Finish conversion will Raising Interrupt Flag and Jump to ADC_ISR Function.    
    #elif ( ADIE == DISABLE )                     // work with Polling
        /* GET FLAG and Polling the Flag */
        u8 ADIF=0 ;
        while( ADIF == 0 )
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	88 23       	and	r24, r24
    1f44:	69 f3       	breq	.-38     	; 0x1f20 <ADC_u16ReadSynchronus+0x126>

    #if ( ADIE == ENABLE )          // work with Interrupt
        // Interrupt Flag Will Cleared Automaticlly.    
    #elif ( ADIE == DISABLE )       // work with Polling
        /* Clear Flag */
      SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    1f46:	a6 e2       	ldi	r26, 0x26	; 38
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e6 e2       	ldi	r30, 0x26	; 38
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	80 61       	ori	r24, 0x10	; 16
    1f52:	8c 93       	st	X, r24
    #endif 

    #if ( ADJUST == RIGHT )
        return ADC_REG ;      
    1f54:	e4 e2       	ldi	r30, 0x24	; 36
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    #elif ( ADJUST == LEFT )
        return ADCH_REG ;
    #endif

}
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	08 95       	ret

00001f6a <ADC_u16ReadASynchronus>:

u16 ADC_u16ReadASynchronus ( u8 Copy_u8ChannelNumber ,  void (*Local_PvoidCallBackFunctionPtr) (void) ) 
{
    1f6a:	df 93       	push	r29
    1f6c:	cf 93       	push	r28
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	27 97       	sbiw	r28, 0x07	; 7
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	89 83       	std	Y+1, r24	; 0x01
    1f80:	7b 83       	std	Y+3, r23	; 0x03
    1f82:	6a 83       	std	Y+2, r22	; 0x02
    if ( (ADC_u18BusyFlag == BUSY) ||  (Local_PvoidCallBackFunctionPtr == NULL) )
    1f84:	80 91 9e 00 	lds	r24, 0x009E
    1f88:	88 23       	and	r24, r24
    1f8a:	21 f0       	breq	.+8      	; 0x1f94 <ADC_u16ReadASynchronus+0x2a>
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	00 97       	sbiw	r24, 0x00	; 0
    1f92:	19 f4       	brne	.+6      	; 0x1f9a <ADC_u16ReadASynchronus+0x30>
    {
        return 0;
    1f94:	1f 82       	std	Y+7, r1	; 0x07
    1f96:	1e 82       	std	Y+6, r1	; 0x06
    1f98:	9f c0       	rjmp	.+318    	; 0x20d8 <ADC_u16ReadASynchronus+0x16e>
    }
    else
    {
        /*   Make the ADC State is Busy   */
            ADC_u18BusyFlag = BUSY ;
    1f9a:	10 92 9e 00 	sts	0x009E, r1
        
            /*     Clear MUX      */ 
            ADMUX_REG = ( ADMUX_REG & 0b11100000 );        
    1f9e:	a7 e2       	ldi	r26, 0x27	; 39
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e7 e2       	ldi	r30, 0x27	; 39
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 7e       	andi	r24, 0xE0	; 224
    1faa:	8c 93       	st	X, r24
        
            /*   Select channel   */ 
            switch ( Copy_u8ChannelNumber )
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	28 2f       	mov	r18, r24
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	3d 83       	std	Y+5, r19	; 0x05
    1fb4:	2c 83       	std	Y+4, r18	; 0x04
    1fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fba:	83 30       	cpi	r24, 0x03	; 3
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <ADC_u16ReadASynchronus+0x58>
    1fc0:	45 c0       	rjmp	.+138    	; 0x204c <ADC_u16ReadASynchronus+0xe2>
    1fc2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fc4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fc6:	24 30       	cpi	r18, 0x04	; 4
    1fc8:	31 05       	cpc	r19, r1
    1fca:	7c f4       	brge	.+30     	; 0x1fea <ADC_u16ReadASynchronus+0x80>
    1fcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1fce:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd0:	81 30       	cpi	r24, 0x01	; 1
    1fd2:	91 05       	cpc	r25, r1
    1fd4:	49 f1       	breq	.+82     	; 0x2028 <ADC_u16ReadASynchronus+0xbe>
    1fd6:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd8:	3d 81       	ldd	r19, Y+5	; 0x05
    1fda:	22 30       	cpi	r18, 0x02	; 2
    1fdc:	31 05       	cpc	r19, r1
    1fde:	6c f5       	brge	.+90     	; 0x203a <ADC_u16ReadASynchronus+0xd0>
    1fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	c1 f0       	breq	.+48     	; 0x2018 <ADC_u16ReadASynchronus+0xae>
    1fe8:	5d c0       	rjmp	.+186    	; 0x20a4 <ADC_u16ReadASynchronus+0x13a>
    1fea:	2c 81       	ldd	r18, Y+4	; 0x04
    1fec:	3d 81       	ldd	r19, Y+5	; 0x05
    1fee:	25 30       	cpi	r18, 0x05	; 5
    1ff0:	31 05       	cpc	r19, r1
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <ADC_u16ReadASynchronus+0x8c>
    1ff4:	3d c0       	rjmp	.+122    	; 0x2070 <ADC_u16ReadASynchronus+0x106>
    1ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff8:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffa:	85 30       	cpi	r24, 0x05	; 5
    1ffc:	91 05       	cpc	r25, r1
    1ffe:	7c f1       	brlt	.+94     	; 0x205e <ADC_u16ReadASynchronus+0xf4>
    2000:	2c 81       	ldd	r18, Y+4	; 0x04
    2002:	3d 81       	ldd	r19, Y+5	; 0x05
    2004:	26 30       	cpi	r18, 0x06	; 6
    2006:	31 05       	cpc	r19, r1
    2008:	e1 f1       	breq	.+120    	; 0x2082 <ADC_u16ReadASynchronus+0x118>
    200a:	8c 81       	ldd	r24, Y+4	; 0x04
    200c:	9d 81       	ldd	r25, Y+5	; 0x05
    200e:	87 30       	cpi	r24, 0x07	; 7
    2010:	91 05       	cpc	r25, r1
    2012:	09 f4       	brne	.+2      	; 0x2016 <ADC_u16ReadASynchronus+0xac>
    2014:	3f c0       	rjmp	.+126    	; 0x2094 <ADC_u16ReadASynchronus+0x12a>
    2016:	46 c0       	rjmp	.+140    	; 0x20a4 <ADC_u16ReadASynchronus+0x13a>
            {
                case ADC0 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000000 );     break;
    2018:	a7 e2       	ldi	r26, 0x27	; 39
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e7 e2       	ldi	r30, 0x27	; 39
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	80 81       	ld	r24, Z
    2022:	80 7e       	andi	r24, 0xE0	; 224
    2024:	8c 93       	st	X, r24
    2026:	3e c0       	rjmp	.+124    	; 0x20a4 <ADC_u16ReadASynchronus+0x13a>
                case ADC1 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000001 );     break;
    2028:	a7 e2       	ldi	r26, 0x27	; 39
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e7 e2       	ldi	r30, 0x27	; 39
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 81       	ld	r24, Z
    2032:	80 7e       	andi	r24, 0xE0	; 224
    2034:	81 60       	ori	r24, 0x01	; 1
    2036:	8c 93       	st	X, r24
    2038:	35 c0       	rjmp	.+106    	; 0x20a4 <ADC_u16ReadASynchronus+0x13a>
                case ADC2 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000010 );     break;        
    203a:	a7 e2       	ldi	r26, 0x27	; 39
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e7 e2       	ldi	r30, 0x27	; 39
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	80 7e       	andi	r24, 0xE0	; 224
    2046:	82 60       	ori	r24, 0x02	; 2
    2048:	8c 93       	st	X, r24
    204a:	2c c0       	rjmp	.+88     	; 0x20a4 <ADC_u16ReadASynchronus+0x13a>
                case ADC3 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000011 );     break;
    204c:	a7 e2       	ldi	r26, 0x27	; 39
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e7 e2       	ldi	r30, 0x27	; 39
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	80 7e       	andi	r24, 0xE0	; 224
    2058:	83 60       	ori	r24, 0x03	; 3
    205a:	8c 93       	st	X, r24
    205c:	23 c0       	rjmp	.+70     	; 0x20a4 <ADC_u16ReadASynchronus+0x13a>
                case ADC4 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000100 );     break;
    205e:	a7 e2       	ldi	r26, 0x27	; 39
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e7 e2       	ldi	r30, 0x27	; 39
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	80 81       	ld	r24, Z
    2068:	80 7e       	andi	r24, 0xE0	; 224
    206a:	84 60       	ori	r24, 0x04	; 4
    206c:	8c 93       	st	X, r24
    206e:	1a c0       	rjmp	.+52     	; 0x20a4 <ADC_u16ReadASynchronus+0x13a>
                case ADC5 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000101 );     break;
    2070:	a7 e2       	ldi	r26, 0x27	; 39
    2072:	b0 e0       	ldi	r27, 0x00	; 0
    2074:	e7 e2       	ldi	r30, 0x27	; 39
    2076:	f0 e0       	ldi	r31, 0x00	; 0
    2078:	80 81       	ld	r24, Z
    207a:	80 7e       	andi	r24, 0xE0	; 224
    207c:	85 60       	ori	r24, 0x05	; 5
    207e:	8c 93       	st	X, r24
    2080:	11 c0       	rjmp	.+34     	; 0x20a4 <ADC_u16ReadASynchronus+0x13a>
                case ADC6 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000110 );     break;
    2082:	a7 e2       	ldi	r26, 0x27	; 39
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e7 e2       	ldi	r30, 0x27	; 39
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	80 7e       	andi	r24, 0xE0	; 224
    208e:	86 60       	ori	r24, 0x06	; 6
    2090:	8c 93       	st	X, r24
    2092:	08 c0       	rjmp	.+16     	; 0x20a4 <ADC_u16ReadASynchronus+0x13a>
                case ADC7 :     ADMUX_REG = (( ADMUX_REG & 0b11100000 ) | 0b00000111 );     break;
    2094:	a7 e2       	ldi	r26, 0x27	; 39
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	e7 e2       	ldi	r30, 0x27	; 39
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	80 7e       	andi	r24, 0xE0	; 224
    20a0:	87 60       	ori	r24, 0x07	; 7
    20a2:	8c 93       	st	X, r24
                default   :                                                                 break;
            }
        
            /*    Set The Call Back Function    */ 
            Global_PF_Vector_16 = Local_PvoidCallBackFunctionPtr ;
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	9b 81       	ldd	r25, Y+3	; 0x03
    20a8:	90 93 9b 00 	sts	0x009B, r25
    20ac:	80 93 9a 00 	sts	0x009A, r24
          
            /*    Start Conversion    */ 
            #if ( ADATE == ENABLE )
                // Start Conversion When Triggering Occures.
            #elif ( ADATE == DISABLE )
              SET_BIT(ADCSRA_REG,ADCSRA_ADSC);
    20b0:	a6 e2       	ldi	r26, 0x26	; 38
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e6 e2       	ldi	r30, 0x26	; 38
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	80 64       	ori	r24, 0x40	; 64
    20bc:	8c 93       	st	X, r24
            #endif
          
            /*     Enable ADIE  AD Interrupt Enable  and Interrupt Flag Will Cleared Automaticlly.       */   
          SET_BIT(ADCSRA_REG,ADCSRA_ADIE);
    20be:	a6 e2       	ldi	r26, 0x26	; 38
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e6 e2       	ldi	r30, 0x26	; 38
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	88 60       	ori	r24, 0x08	; 8
    20ca:	8c 93       	st	X, r24
     
           return ADC_u16Result ; 
    20cc:	20 91 9c 00 	lds	r18, 0x009C
    20d0:	30 91 9d 00 	lds	r19, 0x009D
    20d4:	3f 83       	std	Y+7, r19	; 0x07
    20d6:	2e 83       	std	Y+6, r18	; 0x06
    20d8:	8e 81       	ldd	r24, Y+6	; 0x06
    20da:	9f 81       	ldd	r25, Y+7	; 0x07
        
    }
}
    20dc:	27 96       	adiw	r28, 0x07	; 7
    20de:	0f b6       	in	r0, 0x3f	; 63
    20e0:	f8 94       	cli
    20e2:	de bf       	out	0x3e, r29	; 62
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	cd bf       	out	0x3d, r28	; 61
    20e8:	cf 91       	pop	r28
    20ea:	df 91       	pop	r29
    20ec:	08 95       	ret

000020ee <__vector_16>:

void __vector_16 (void)   __attribute__((signal));
void __vector_16 (void)
{
    20ee:	1f 92       	push	r1
    20f0:	0f 92       	push	r0
    20f2:	0f b6       	in	r0, 0x3f	; 63
    20f4:	0f 92       	push	r0
    20f6:	11 24       	eor	r1, r1
    20f8:	2f 93       	push	r18
    20fa:	3f 93       	push	r19
    20fc:	4f 93       	push	r20
    20fe:	5f 93       	push	r21
    2100:	6f 93       	push	r22
    2102:	7f 93       	push	r23
    2104:	8f 93       	push	r24
    2106:	9f 93       	push	r25
    2108:	af 93       	push	r26
    210a:	bf 93       	push	r27
    210c:	ef 93       	push	r30
    210e:	ff 93       	push	r31
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	cd b7       	in	r28, 0x3d	; 61
    2116:	de b7       	in	r29, 0x3e	; 62


    #if ( ADJUST == RIGHT )
    ADC_u16Result = ADC_REG ;      
    2118:	e4 e2       	ldi	r30, 0x24	; 36
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	90 93 9d 00 	sts	0x009D, r25
    2124:	80 93 9c 00 	sts	0x009C, r24
    #elif ( ADJUST == LEFT )
    ADC_u16Result = ADCH_REG ;
    #endif

/*   Make the ADC State is NOT Busy because it's Completed   */
    ADC_u18BusyFlag = NOT_BUSY ;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	80 93 9e 00 	sts	0x009E, r24

/*   Call Call Back Function br Global PTR   */
    Global_PF_Vector_16 ();
    212e:	e0 91 9a 00 	lds	r30, 0x009A
    2132:	f0 91 9b 00 	lds	r31, 0x009B
    2136:	09 95       	icall

/*     Disable ADIE  AD Interrupt Enable     */   
    CLR_BIT(ADCSRA_REG,ADCSRA_ADIE);
    2138:	a6 e2       	ldi	r26, 0x26	; 38
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	e6 e2       	ldi	r30, 0x26	; 38
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	87 7f       	andi	r24, 0xF7	; 247
    2144:	8c 93       	st	X, r24
    
}
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	ff 91       	pop	r31
    214c:	ef 91       	pop	r30
    214e:	bf 91       	pop	r27
    2150:	af 91       	pop	r26
    2152:	9f 91       	pop	r25
    2154:	8f 91       	pop	r24
    2156:	7f 91       	pop	r23
    2158:	6f 91       	pop	r22
    215a:	5f 91       	pop	r21
    215c:	4f 91       	pop	r20
    215e:	3f 91       	pop	r19
    2160:	2f 91       	pop	r18
    2162:	0f 90       	pop	r0
    2164:	0f be       	out	0x3f, r0	; 63
    2166:	0f 90       	pop	r0
    2168:	1f 90       	pop	r1
    216a:	18 95       	reti

0000216c <SERVO_voidRotateSpecificAngle_OC1A>:
#include "../../MCAL/DIO/DIO_Interface.h"
#include "../../MCAL/TIMERS/TIMER1/TIMER1_Interface.h"


void SERVO_voidRotateSpecificAngle_OC1A ( u16 Copy_u16Angle )
{
    216c:	df 93       	push	r29
    216e:	cf 93       	push	r28
    2170:	00 d0       	rcall	.+0      	; 0x2172 <SERVO_voidRotateSpecificAngle_OC1A+0x6>
    2172:	00 d0       	rcall	.+0      	; 0x2174 <SERVO_voidRotateSpecificAngle_OC1A+0x8>
    2174:	00 d0       	rcall	.+0      	; 0x2176 <SERVO_voidRotateSpecificAngle_OC1A+0xa>
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
    217a:	9e 83       	std	Y+6, r25	; 0x06
    217c:	8d 83       	std	Y+5, r24	; 0x05
    DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT);
    217e:	83 e0       	ldi	r24, 0x03	; 3
    2180:	65 e0       	ldi	r22, 0x05	; 5
    2182:	41 e0       	ldi	r20, 0x01	; 1
    2184:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_voidSetPinDirection>
    u32 Local_u32Variable ;
    Local_u32Variable = ((Copy_u16Angle*1000UL)+179820) / (180) ;
    2188:	8d 81       	ldd	r24, Y+5	; 0x05
    218a:	9e 81       	ldd	r25, Y+6	; 0x06
    218c:	cc 01       	movw	r24, r24
    218e:	a0 e0       	ldi	r26, 0x00	; 0
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	28 ee       	ldi	r18, 0xE8	; 232
    2194:	33 e0       	ldi	r19, 0x03	; 3
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__mulsi3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	84 59       	subi	r24, 0x94	; 148
    21a8:	91 44       	sbci	r25, 0x41	; 65
    21aa:	ad 4f       	sbci	r26, 0xFD	; 253
    21ac:	bf 4f       	sbci	r27, 0xFF	; 255
    21ae:	24 eb       	ldi	r18, 0xB4	; 180
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	bc 01       	movw	r22, r24
    21b8:	cd 01       	movw	r24, r26
    21ba:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <__udivmodsi4>
    21be:	da 01       	movw	r26, r20
    21c0:	c9 01       	movw	r24, r18
    21c2:	89 83       	std	Y+1, r24	; 0x01
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	ab 83       	std	Y+3, r26	; 0x03
    21c8:	bc 83       	std	Y+4, r27	; 0x04
    TIMER1_void_u16PWM_T1A ( Local_u32Variable ,19999);
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	9a 81       	ldd	r25, Y+2	; 0x02
    21ce:	6f e1       	ldi	r22, 0x1F	; 31
    21d0:	7e e4       	ldi	r23, 0x4E	; 78
    21d2:	0e 94 70 06 	call	0xce0	; 0xce0 <TIMER1_void_u16PWM_T1A>
}
    21d6:	26 96       	adiw	r28, 0x06	; 6
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	0f be       	out	0x3f, r0	; 63
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	cf 91       	pop	r28
    21e4:	df 91       	pop	r29
    21e6:	08 95       	ret

000021e8 <SERVO_voidRotateSpecificAngle_OC1B>:



void SERVO_voidRotateSpecificAngle_OC1B ( u16 Copy_u16Angle )
{
    21e8:	df 93       	push	r29
    21ea:	cf 93       	push	r28
    21ec:	00 d0       	rcall	.+0      	; 0x21ee <SERVO_voidRotateSpecificAngle_OC1B+0x6>
    21ee:	00 d0       	rcall	.+0      	; 0x21f0 <SERVO_voidRotateSpecificAngle_OC1B+0x8>
    21f0:	00 d0       	rcall	.+0      	; 0x21f2 <SERVO_voidRotateSpecificAngle_OC1B+0xa>
    21f2:	cd b7       	in	r28, 0x3d	; 61
    21f4:	de b7       	in	r29, 0x3e	; 62
    21f6:	9e 83       	std	Y+6, r25	; 0x06
    21f8:	8d 83       	std	Y+5, r24	; 0x05
	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN4,DIO_OUTPUT);
    21fa:	83 e0       	ldi	r24, 0x03	; 3
    21fc:	64 e0       	ldi	r22, 0x04	; 4
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_voidSetPinDirection>
    u32 Local_u32Variable ;
    Local_u32Variable = ((Copy_u16Angle*1000UL)+179820) / (180) ;
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	cc 01       	movw	r24, r24
    220a:	a0 e0       	ldi	r26, 0x00	; 0
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	28 ee       	ldi	r18, 0xE8	; 232
    2210:	33 e0       	ldi	r19, 0x03	; 3
    2212:	40 e0       	ldi	r20, 0x00	; 0
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__mulsi3>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	84 59       	subi	r24, 0x94	; 148
    2224:	91 44       	sbci	r25, 0x41	; 65
    2226:	ad 4f       	sbci	r26, 0xFD	; 253
    2228:	bf 4f       	sbci	r27, 0xFF	; 255
    222a:	24 eb       	ldi	r18, 0xB4	; 180
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	50 e0       	ldi	r21, 0x00	; 0
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <__udivmodsi4>
    223a:	da 01       	movw	r26, r20
    223c:	c9 01       	movw	r24, r18
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	ab 83       	std	Y+3, r26	; 0x03
    2244:	bc 83       	std	Y+4, r27	; 0x04
    TIMER1_void_u16PWM_T1B ( Local_u32Variable ,19999);
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	9a 81       	ldd	r25, Y+2	; 0x02
    224a:	6f e1       	ldi	r22, 0x1F	; 31
    224c:	7e e4       	ldi	r23, 0x4E	; 78
    224e:	0e 94 8b 06 	call	0xd16	; 0xd16 <TIMER1_void_u16PWM_T1B>
}
    2252:	26 96       	adiw	r28, 0x06	; 6
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <Temp_u8GetReading>:

#include "LM35_Interface.h"


u16 Temp_u8GetReading(u8 Copy_u8Channel)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	27 97       	sbiw	r28, 0x07	; 7
    226e:	0f b6       	in	r0, 0x3f	; 63
    2270:	f8 94       	cli
    2272:	de bf       	out	0x3e, r29	; 62
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	cd bf       	out	0x3d, r28	; 61
    2278:	8f 83       	std	Y+7, r24	; 0x07
	u16 Digital_Signal_Temp,Analog_Signal_Temp,Temp_Value;

	Digital_Signal_Temp =  ADC_u16ReadSynchronus ( Copy_u8Channel ) ;
    227a:	8f 81       	ldd	r24, Y+7	; 0x07
    227c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <ADC_u16ReadSynchronus>
    2280:	9e 83       	std	Y+6, r25	; 0x06
    2282:	8d 83       	std	Y+5, r24	; 0x05
	Analog_Signal_Temp = ((u32)Digital_Signal_Temp * VREF_VOLTAGE_MV ) /ADC_RESOLUTION ;   // 5000 mv   to read Analog_Signal by mv.
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	cc 01       	movw	r24, r24
    228a:	a0 e0       	ldi	r26, 0x00	; 0
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	28 e8       	ldi	r18, 0x88	; 136
    2290:	33 e1       	ldi	r19, 0x13	; 19
    2292:	40 e0       	ldi	r20, 0x00	; 0
    2294:	50 e0       	ldi	r21, 0x00	; 0
    2296:	bc 01       	movw	r22, r24
    2298:	cd 01       	movw	r24, r26
    229a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <__mulsi3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	07 2e       	mov	r0, r23
    22a4:	7a e0       	ldi	r23, 0x0A	; 10
    22a6:	b6 95       	lsr	r27
    22a8:	a7 95       	ror	r26
    22aa:	97 95       	ror	r25
    22ac:	87 95       	ror	r24
    22ae:	7a 95       	dec	r23
    22b0:	d1 f7       	brne	.-12     	; 0x22a6 <Temp_u8GetReading+0x42>
    22b2:	70 2d       	mov	r23, r0
    22b4:	9c 83       	std	Y+4, r25	; 0x04
    22b6:	8b 83       	std	Y+3, r24	; 0x03
	Temp_Value = Analog_Signal_Temp / 10 ;
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	2a e0       	ldi	r18, 0x0A	; 10
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	b9 01       	movw	r22, r18
    22c2:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__udivmodhi4>
    22c6:	cb 01       	movw	r24, r22
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01

	return Temp_Value;
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	9a 81       	ldd	r25, Y+2	; 0x02

}
    22d0:	27 96       	adiw	r28, 0x07	; 7
    22d2:	0f b6       	in	r0, 0x3f	; 63
    22d4:	f8 94       	cli
    22d6:	de bf       	out	0x3e, r29	; 62
    22d8:	0f be       	out	0x3f, r0	; 63
    22da:	cd bf       	out	0x3d, r28	; 61
    22dc:	cf 91       	pop	r28
    22de:	df 91       	pop	r29
    22e0:	08 95       	ret

000022e2 <LCD_voidInit>:
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include "LCD_Config.h"

void LCD_voidInit (void)
{
    22e2:	0f 93       	push	r16
    22e4:	1f 93       	push	r17
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	c6 54       	subi	r28, 0x46	; 70
    22f0:	d0 40       	sbci	r29, 0x00	; 0
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	de bf       	out	0x3e, r29	; 62
    22f8:	0f be       	out	0x3f, r0	; 63
    22fa:	cd bf       	out	0x3d, r28	; 61
    /* Control Pins Directions */
    DIO_voidSetPortDirection(LCD_DATA_PORT , DIO_OUTPUT);
    22fc:	82 e0       	ldi	r24, 0x02	; 2
    22fe:	61 e0       	ldi	r22, 0x01	; 1
    2300:	0e 94 ae 0a 	call	0x155c	; 0x155c <DIO_voidSetPortDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RS_PIN,DIO_OUTPUT);
    2304:	83 e0       	ldi	r24, 0x03	; 3
    2306:	60 e0       	ldi	r22, 0x00	; 0
    2308:	41 e0       	ldi	r20, 0x01	; 1
    230a:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,RW_PIN,DIO_OUTPUT);
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	61 e0       	ldi	r22, 0x01	; 1
    2312:	41 e0       	ldi	r20, 0x01	; 1
    2314:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(LCD_CONTROL_PORT,E_PIN,DIO_OUTPUT);
    2318:	83 e0       	ldi	r24, 0x03	; 3
    231a:	62 e0       	ldi	r22, 0x02	; 2
    231c:	41 e0       	ldi	r20, 0x01	; 1
    231e:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_voidSetPinDirection>
    2322:	fe 01       	movw	r30, r28
    2324:	ed 5b       	subi	r30, 0xBD	; 189
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 e0       	ldi	r24, 0x00	; 0
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	ac e0       	ldi	r26, 0x0C	; 12
    232e:	b2 e4       	ldi	r27, 0x42	; 66
    2330:	80 83       	st	Z, r24
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	a2 83       	std	Z+2, r26	; 0x02
    2336:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2338:	8e 01       	movw	r16, r28
    233a:	01 5c       	subi	r16, 0xC1	; 193
    233c:	1f 4f       	sbci	r17, 0xFF	; 255
    233e:	fe 01       	movw	r30, r28
    2340:	ed 5b       	subi	r30, 0xBD	; 189
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	60 81       	ld	r22, Z
    2346:	71 81       	ldd	r23, Z+1	; 0x01
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	4a ef       	ldi	r20, 0xFA	; 250
    2352:	54 e4       	ldi	r21, 0x44	; 68
    2354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	f8 01       	movw	r30, r16
    235e:	80 83       	st	Z, r24
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	a2 83       	std	Z+2, r26	; 0x02
    2364:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2366:	fe 01       	movw	r30, r28
    2368:	ff 96       	adiw	r30, 0x3f	; 63
    236a:	60 81       	ld	r22, Z
    236c:	71 81       	ldd	r23, Z+1	; 0x01
    236e:	82 81       	ldd	r24, Z+2	; 0x02
    2370:	93 81       	ldd	r25, Z+3	; 0x03
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	40 e8       	ldi	r20, 0x80	; 128
    2378:	5f e3       	ldi	r21, 0x3F	; 63
    237a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    237e:	88 23       	and	r24, r24
    2380:	2c f4       	brge	.+10     	; 0x238c <LCD_voidInit+0xaa>
		__ticks = 1;
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9e af       	std	Y+62, r25	; 0x3e
    2388:	8d af       	std	Y+61, r24	; 0x3d
    238a:	46 c0       	rjmp	.+140    	; 0x2418 <LCD_voidInit+0x136>
	else if (__tmp > 65535)
    238c:	fe 01       	movw	r30, r28
    238e:	ff 96       	adiw	r30, 0x3f	; 63
    2390:	60 81       	ld	r22, Z
    2392:	71 81       	ldd	r23, Z+1	; 0x01
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	3f ef       	ldi	r19, 0xFF	; 255
    239c:	4f e7       	ldi	r20, 0x7F	; 127
    239e:	57 e4       	ldi	r21, 0x47	; 71
    23a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23a4:	18 16       	cp	r1, r24
    23a6:	64 f5       	brge	.+88     	; 0x2400 <LCD_voidInit+0x11e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a8:	fe 01       	movw	r30, r28
    23aa:	ed 5b       	subi	r30, 0xBD	; 189
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e2       	ldi	r20, 0x20	; 32
    23bc:	51 e4       	ldi	r21, 0x41	; 65
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	bc 01       	movw	r22, r24
    23c8:	cd 01       	movw	r24, r26
    23ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	9e af       	std	Y+62, r25	; 0x3e
    23d4:	8d af       	std	Y+61, r24	; 0x3d
    23d6:	0f c0       	rjmp	.+30     	; 0x23f6 <LCD_voidInit+0x114>
    23d8:	88 ec       	ldi	r24, 0xC8	; 200
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	9c af       	std	Y+60, r25	; 0x3c
    23de:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e0:	8b ad       	ldd	r24, Y+59	; 0x3b
    23e2:	9c ad       	ldd	r25, Y+60	; 0x3c
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <LCD_voidInit+0x102>
    23e8:	9c af       	std	Y+60, r25	; 0x3c
    23ea:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	9e af       	std	Y+62, r25	; 0x3e
    23f4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23f8:	9e ad       	ldd	r25, Y+62	; 0x3e
    23fa:	00 97       	sbiw	r24, 0x00	; 0
    23fc:	69 f7       	brne	.-38     	; 0x23d8 <LCD_voidInit+0xf6>
    23fe:	16 c0       	rjmp	.+44     	; 0x242c <LCD_voidInit+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2400:	fe 01       	movw	r30, r28
    2402:	ff 96       	adiw	r30, 0x3f	; 63
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9e af       	std	Y+62, r25	; 0x3e
    2416:	8d af       	std	Y+61, r24	; 0x3d
    2418:	8d ad       	ldd	r24, Y+61	; 0x3d
    241a:	9e ad       	ldd	r25, Y+62	; 0x3e
    241c:	9a af       	std	Y+58, r25	; 0x3a
    241e:	89 af       	std	Y+57, r24	; 0x39
    2420:	89 ad       	ldd	r24, Y+57	; 0x39
    2422:	9a ad       	ldd	r25, Y+58	; 0x3a
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	f1 f7       	brne	.-4      	; 0x2424 <LCD_voidInit+0x142>
    2428:	9a af       	std	Y+58, r25	; 0x3a
    242a:	89 af       	std	Y+57, r24	; 0x39

    _delay_ms(35);    //TIMER0_voidSetBusyWait_ms(35);

    /* Send Command Function Set */
    LCD_voidWriteCommand ( FS_8BIT_2LINES_5x7 );
    242c:	88 e3       	ldi	r24, 0x38	; 56
    242e:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidWriteCommand>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a0 e8       	ldi	r26, 0x80	; 128
    2438:	bf e3       	ldi	r27, 0x3F	; 63
    243a:	8d ab       	std	Y+53, r24	; 0x35
    243c:	9e ab       	std	Y+54, r25	; 0x36
    243e:	af ab       	std	Y+55, r26	; 0x37
    2440:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2442:	6d a9       	ldd	r22, Y+53	; 0x35
    2444:	7e a9       	ldd	r23, Y+54	; 0x36
    2446:	8f a9       	ldd	r24, Y+55	; 0x37
    2448:	98 ad       	ldd	r25, Y+56	; 0x38
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	4a ef       	ldi	r20, 0xFA	; 250
    2450:	54 e4       	ldi	r21, 0x44	; 68
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	89 ab       	std	Y+49, r24	; 0x31
    245c:	9a ab       	std	Y+50, r25	; 0x32
    245e:	ab ab       	std	Y+51, r26	; 0x33
    2460:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2462:	69 a9       	ldd	r22, Y+49	; 0x31
    2464:	7a a9       	ldd	r23, Y+50	; 0x32
    2466:	8b a9       	ldd	r24, Y+51	; 0x33
    2468:	9c a9       	ldd	r25, Y+52	; 0x34
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	40 e8       	ldi	r20, 0x80	; 128
    2470:	5f e3       	ldi	r21, 0x3F	; 63
    2472:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2476:	88 23       	and	r24, r24
    2478:	2c f4       	brge	.+10     	; 0x2484 <LCD_voidInit+0x1a2>
		__ticks = 1;
    247a:	81 e0       	ldi	r24, 0x01	; 1
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	98 ab       	std	Y+48, r25	; 0x30
    2480:	8f a7       	std	Y+47, r24	; 0x2f
    2482:	3f c0       	rjmp	.+126    	; 0x2502 <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    2484:	69 a9       	ldd	r22, Y+49	; 0x31
    2486:	7a a9       	ldd	r23, Y+50	; 0x32
    2488:	8b a9       	ldd	r24, Y+51	; 0x33
    248a:	9c a9       	ldd	r25, Y+52	; 0x34
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	3f ef       	ldi	r19, 0xFF	; 255
    2490:	4f e7       	ldi	r20, 0x7F	; 127
    2492:	57 e4       	ldi	r21, 0x47	; 71
    2494:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2498:	18 16       	cp	r1, r24
    249a:	4c f5       	brge	.+82     	; 0x24ee <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249c:	6d a9       	ldd	r22, Y+53	; 0x35
    249e:	7e a9       	ldd	r23, Y+54	; 0x36
    24a0:	8f a9       	ldd	r24, Y+55	; 0x37
    24a2:	98 ad       	ldd	r25, Y+56	; 0x38
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	40 e2       	ldi	r20, 0x20	; 32
    24aa:	51 e4       	ldi	r21, 0x41	; 65
    24ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	98 ab       	std	Y+48, r25	; 0x30
    24c2:	8f a7       	std	Y+47, r24	; 0x2f
    24c4:	0f c0       	rjmp	.+30     	; 0x24e4 <LCD_voidInit+0x202>
    24c6:	88 ec       	ldi	r24, 0xC8	; 200
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9e a7       	std	Y+46, r25	; 0x2e
    24cc:	8d a7       	std	Y+45, r24	; 0x2d
    24ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    24d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <LCD_voidInit+0x1f0>
    24d6:	9e a7       	std	Y+46, r25	; 0x2e
    24d8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24da:	8f a5       	ldd	r24, Y+47	; 0x2f
    24dc:	98 a9       	ldd	r25, Y+48	; 0x30
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	98 ab       	std	Y+48, r25	; 0x30
    24e2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e6:	98 a9       	ldd	r25, Y+48	; 0x30
    24e8:	00 97       	sbiw	r24, 0x00	; 0
    24ea:	69 f7       	brne	.-38     	; 0x24c6 <LCD_voidInit+0x1e4>
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ee:	69 a9       	ldd	r22, Y+49	; 0x31
    24f0:	7a a9       	ldd	r23, Y+50	; 0x32
    24f2:	8b a9       	ldd	r24, Y+51	; 0x33
    24f4:	9c a9       	ldd	r25, Y+52	; 0x34
    24f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	98 ab       	std	Y+48, r25	; 0x30
    2500:	8f a7       	std	Y+47, r24	; 0x2f
    2502:	8f a5       	ldd	r24, Y+47	; 0x2f
    2504:	98 a9       	ldd	r25, Y+48	; 0x30
    2506:	9c a7       	std	Y+44, r25	; 0x2c
    2508:	8b a7       	std	Y+43, r24	; 0x2b
    250a:	8b a5       	ldd	r24, Y+43	; 0x2b
    250c:	9c a5       	ldd	r25, Y+44	; 0x2c
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	f1 f7       	brne	.-4      	; 0x250e <LCD_voidInit+0x22c>
    2512:	9c a7       	std	Y+44, r25	; 0x2c
    2514:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(1);     // TIMER0_voidSetBusyWait_ms(1);

    /* Send Command Display ON-OFF Control */
    LCD_voidWriteCommand ( DIS_ON_NO_CURSER );
    2516:	8c e0       	ldi	r24, 0x0C	; 12
    2518:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidWriteCommand>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	a0 e8       	ldi	r26, 0x80	; 128
    2522:	bf e3       	ldi	r27, 0x3F	; 63
    2524:	8f a3       	std	Y+39, r24	; 0x27
    2526:	98 a7       	std	Y+40, r25	; 0x28
    2528:	a9 a7       	std	Y+41, r26	; 0x29
    252a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252c:	6f a1       	ldd	r22, Y+39	; 0x27
    252e:	78 a5       	ldd	r23, Y+40	; 0x28
    2530:	89 a5       	ldd	r24, Y+41	; 0x29
    2532:	9a a5       	ldd	r25, Y+42	; 0x2a
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	4a ef       	ldi	r20, 0xFA	; 250
    253a:	54 e4       	ldi	r21, 0x44	; 68
    253c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8b a3       	std	Y+35, r24	; 0x23
    2546:	9c a3       	std	Y+36, r25	; 0x24
    2548:	ad a3       	std	Y+37, r26	; 0x25
    254a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    254c:	6b a1       	ldd	r22, Y+35	; 0x23
    254e:	7c a1       	ldd	r23, Y+36	; 0x24
    2550:	8d a1       	ldd	r24, Y+37	; 0x25
    2552:	9e a1       	ldd	r25, Y+38	; 0x26
    2554:	20 e0       	ldi	r18, 0x00	; 0
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	40 e8       	ldi	r20, 0x80	; 128
    255a:	5f e3       	ldi	r21, 0x3F	; 63
    255c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2560:	88 23       	and	r24, r24
    2562:	2c f4       	brge	.+10     	; 0x256e <LCD_voidInit+0x28c>
		__ticks = 1;
    2564:	81 e0       	ldi	r24, 0x01	; 1
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	9a a3       	std	Y+34, r25	; 0x22
    256a:	89 a3       	std	Y+33, r24	; 0x21
    256c:	3f c0       	rjmp	.+126    	; 0x25ec <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    256e:	6b a1       	ldd	r22, Y+35	; 0x23
    2570:	7c a1       	ldd	r23, Y+36	; 0x24
    2572:	8d a1       	ldd	r24, Y+37	; 0x25
    2574:	9e a1       	ldd	r25, Y+38	; 0x26
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	3f ef       	ldi	r19, 0xFF	; 255
    257a:	4f e7       	ldi	r20, 0x7F	; 127
    257c:	57 e4       	ldi	r21, 0x47	; 71
    257e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2582:	18 16       	cp	r1, r24
    2584:	4c f5       	brge	.+82     	; 0x25d8 <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2586:	6f a1       	ldd	r22, Y+39	; 0x27
    2588:	78 a5       	ldd	r23, Y+40	; 0x28
    258a:	89 a5       	ldd	r24, Y+41	; 0x29
    258c:	9a a5       	ldd	r25, Y+42	; 0x2a
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e2       	ldi	r20, 0x20	; 32
    2594:	51 e4       	ldi	r21, 0x41	; 65
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	bc 01       	movw	r22, r24
    25a0:	cd 01       	movw	r24, r26
    25a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	9a a3       	std	Y+34, r25	; 0x22
    25ac:	89 a3       	std	Y+33, r24	; 0x21
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <LCD_voidInit+0x2ec>
    25b0:	88 ec       	ldi	r24, 0xC8	; 200
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	98 a3       	std	Y+32, r25	; 0x20
    25b6:	8f 8f       	std	Y+31, r24	; 0x1f
    25b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ba:	98 a1       	ldd	r25, Y+32	; 0x20
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	f1 f7       	brne	.-4      	; 0x25bc <LCD_voidInit+0x2da>
    25c0:	98 a3       	std	Y+32, r25	; 0x20
    25c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c4:	89 a1       	ldd	r24, Y+33	; 0x21
    25c6:	9a a1       	ldd	r25, Y+34	; 0x22
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	9a a3       	std	Y+34, r25	; 0x22
    25cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	89 a1       	ldd	r24, Y+33	; 0x21
    25d0:	9a a1       	ldd	r25, Y+34	; 0x22
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	69 f7       	brne	.-38     	; 0x25b0 <LCD_voidInit+0x2ce>
    25d6:	14 c0       	rjmp	.+40     	; 0x2600 <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d8:	6b a1       	ldd	r22, Y+35	; 0x23
    25da:	7c a1       	ldd	r23, Y+36	; 0x24
    25dc:	8d a1       	ldd	r24, Y+37	; 0x25
    25de:	9e a1       	ldd	r25, Y+38	; 0x26
    25e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	9a a3       	std	Y+34, r25	; 0x22
    25ea:	89 a3       	std	Y+33, r24	; 0x21
    25ec:	89 a1       	ldd	r24, Y+33	; 0x21
    25ee:	9a a1       	ldd	r25, Y+34	; 0x22
    25f0:	9e 8f       	std	Y+30, r25	; 0x1e
    25f2:	8d 8f       	std	Y+29, r24	; 0x1d
    25f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	f1 f7       	brne	.-4      	; 0x25f8 <LCD_voidInit+0x316>
    25fc:	9e 8f       	std	Y+30, r25	; 0x1e
    25fe:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(1);     //TIMER0_voidSetBusyWait_ms(1);

    /* Send Command Display Clear */
    LCD_voidWriteCommand ( DIS_CLEAR );
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidWriteCommand>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a0 e0       	ldi	r26, 0x00	; 0
    260c:	b0 e4       	ldi	r27, 0x40	; 64
    260e:	89 8f       	std	Y+25, r24	; 0x19
    2610:	9a 8f       	std	Y+26, r25	; 0x1a
    2612:	ab 8f       	std	Y+27, r26	; 0x1b
    2614:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	69 8d       	ldd	r22, Y+25	; 0x19
    2618:	7a 8d       	ldd	r23, Y+26	; 0x1a
    261a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    261c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a ef       	ldi	r20, 0xFA	; 250
    2624:	54 e4       	ldi	r21, 0x44	; 68
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	8d 8b       	std	Y+21, r24	; 0x15
    2630:	9e 8b       	std	Y+22, r25	; 0x16
    2632:	af 8b       	std	Y+23, r26	; 0x17
    2634:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2636:	6d 89       	ldd	r22, Y+21	; 0x15
    2638:	7e 89       	ldd	r23, Y+22	; 0x16
    263a:	8f 89       	ldd	r24, Y+23	; 0x17
    263c:	98 8d       	ldd	r25, Y+24	; 0x18
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	2c f4       	brge	.+10     	; 0x2658 <LCD_voidInit+0x376>
		__ticks = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9c 8b       	std	Y+20, r25	; 0x14
    2654:	8b 8b       	std	Y+19, r24	; 0x13
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    2658:	6d 89       	ldd	r22, Y+21	; 0x15
    265a:	7e 89       	ldd	r23, Y+22	; 0x16
    265c:	8f 89       	ldd	r24, Y+23	; 0x17
    265e:	98 8d       	ldd	r25, Y+24	; 0x18
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	4c f5       	brge	.+82     	; 0x26c2 <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2670:	69 8d       	ldd	r22, Y+25	; 0x19
    2672:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2674:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2676:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9c 8b       	std	Y+20, r25	; 0x14
    2696:	8b 8b       	std	Y+19, r24	; 0x13
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <LCD_voidInit+0x3d6>
    269a:	88 ec       	ldi	r24, 0xC8	; 200
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9a 8b       	std	Y+18, r25	; 0x12
    26a0:	89 8b       	std	Y+17, r24	; 0x11
    26a2:	89 89       	ldd	r24, Y+17	; 0x11
    26a4:	9a 89       	ldd	r25, Y+18	; 0x12
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <LCD_voidInit+0x3c4>
    26aa:	9a 8b       	std	Y+18, r25	; 0x12
    26ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	8b 89       	ldd	r24, Y+19	; 0x13
    26b0:	9c 89       	ldd	r25, Y+20	; 0x14
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	9c 8b       	std	Y+20, r25	; 0x14
    26b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ba:	9c 89       	ldd	r25, Y+20	; 0x14
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <LCD_voidInit+0x3b8>
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	6d 89       	ldd	r22, Y+21	; 0x15
    26c4:	7e 89       	ldd	r23, Y+22	; 0x16
    26c6:	8f 89       	ldd	r24, Y+23	; 0x17
    26c8:	98 8d       	ldd	r25, Y+24	; 0x18
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9c 8b       	std	Y+20, r25	; 0x14
    26d4:	8b 8b       	std	Y+19, r24	; 0x13
    26d6:	8b 89       	ldd	r24, Y+19	; 0x13
    26d8:	9c 89       	ldd	r25, Y+20	; 0x14
    26da:	98 8b       	std	Y+16, r25	; 0x10
    26dc:	8f 87       	std	Y+15, r24	; 0x0f
    26de:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e0:	98 89       	ldd	r25, Y+16	; 0x10
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_voidInit+0x400>
    26e6:	98 8b       	std	Y+16, r25	; 0x10
    26e8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);     //TIMER0_voidSetBusyWait_ms(2);

    /* Send Command Entry Mode */
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_NO_SHIFT );
    26ea:	86 e0       	ldi	r24, 0x06	; 6
    26ec:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidWriteCommand>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	a0 e8       	ldi	r26, 0x80	; 128
    26f6:	bf e3       	ldi	r27, 0x3F	; 63
    26f8:	8b 87       	std	Y+11, r24	; 0x0b
    26fa:	9c 87       	std	Y+12, r25	; 0x0c
    26fc:	ad 87       	std	Y+13, r26	; 0x0d
    26fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2700:	6b 85       	ldd	r22, Y+11	; 0x0b
    2702:	7c 85       	ldd	r23, Y+12	; 0x0c
    2704:	8d 85       	ldd	r24, Y+13	; 0x0d
    2706:	9e 85       	ldd	r25, Y+14	; 0x0e
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	4a ef       	ldi	r20, 0xFA	; 250
    270e:	54 e4       	ldi	r21, 0x44	; 68
    2710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	8f 83       	std	Y+7, r24	; 0x07
    271a:	98 87       	std	Y+8, r25	; 0x08
    271c:	a9 87       	std	Y+9, r26	; 0x09
    271e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2720:	6f 81       	ldd	r22, Y+7	; 0x07
    2722:	78 85       	ldd	r23, Y+8	; 0x08
    2724:	89 85       	ldd	r24, Y+9	; 0x09
    2726:	9a 85       	ldd	r25, Y+10	; 0x0a
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e8       	ldi	r20, 0x80	; 128
    272e:	5f e3       	ldi	r21, 0x3F	; 63
    2730:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2734:	88 23       	and	r24, r24
    2736:	2c f4       	brge	.+10     	; 0x2742 <LCD_voidInit+0x460>
		__ticks = 1;
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9e 83       	std	Y+6, r25	; 0x06
    273e:	8d 83       	std	Y+5, r24	; 0x05
    2740:	3f c0       	rjmp	.+126    	; 0x27c0 <LCD_voidInit+0x4de>
	else if (__tmp > 65535)
    2742:	6f 81       	ldd	r22, Y+7	; 0x07
    2744:	78 85       	ldd	r23, Y+8	; 0x08
    2746:	89 85       	ldd	r24, Y+9	; 0x09
    2748:	9a 85       	ldd	r25, Y+10	; 0x0a
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	3f ef       	ldi	r19, 0xFF	; 255
    274e:	4f e7       	ldi	r20, 0x7F	; 127
    2750:	57 e4       	ldi	r21, 0x47	; 71
    2752:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2756:	18 16       	cp	r1, r24
    2758:	4c f5       	brge	.+82     	; 0x27ac <LCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275a:	6b 85       	ldd	r22, Y+11	; 0x0b
    275c:	7c 85       	ldd	r23, Y+12	; 0x0c
    275e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2760:	9e 85       	ldd	r25, Y+14	; 0x0e
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	40 e2       	ldi	r20, 0x20	; 32
    2768:	51 e4       	ldi	r21, 0x41	; 65
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	bc 01       	movw	r22, r24
    2774:	cd 01       	movw	r24, r26
    2776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277a:	dc 01       	movw	r26, r24
    277c:	cb 01       	movw	r24, r22
    277e:	9e 83       	std	Y+6, r25	; 0x06
    2780:	8d 83       	std	Y+5, r24	; 0x05
    2782:	0f c0       	rjmp	.+30     	; 0x27a2 <LCD_voidInit+0x4c0>
    2784:	88 ec       	ldi	r24, 0xC8	; 200
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	9c 83       	std	Y+4, r25	; 0x04
    278a:	8b 83       	std	Y+3, r24	; 0x03
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	9c 81       	ldd	r25, Y+4	; 0x04
    2790:	01 97       	sbiw	r24, 0x01	; 1
    2792:	f1 f7       	brne	.-4      	; 0x2790 <LCD_voidInit+0x4ae>
    2794:	9c 83       	std	Y+4, r25	; 0x04
    2796:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2798:	8d 81       	ldd	r24, Y+5	; 0x05
    279a:	9e 81       	ldd	r25, Y+6	; 0x06
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a2:	8d 81       	ldd	r24, Y+5	; 0x05
    27a4:	9e 81       	ldd	r25, Y+6	; 0x06
    27a6:	00 97       	sbiw	r24, 0x00	; 0
    27a8:	69 f7       	brne	.-38     	; 0x2784 <LCD_voidInit+0x4a2>
    27aa:	14 c0       	rjmp	.+40     	; 0x27d4 <LCD_voidInit+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ac:	6f 81       	ldd	r22, Y+7	; 0x07
    27ae:	78 85       	ldd	r23, Y+8	; 0x08
    27b0:	89 85       	ldd	r24, Y+9	; 0x09
    27b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	9e 83       	std	Y+6, r25	; 0x06
    27be:	8d 83       	std	Y+5, r24	; 0x05
    27c0:	8d 81       	ldd	r24, Y+5	; 0x05
    27c2:	9e 81       	ldd	r25, Y+6	; 0x06
    27c4:	9a 83       	std	Y+2, r25	; 0x02
    27c6:	89 83       	std	Y+1, r24	; 0x01
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
    27ca:	9a 81       	ldd	r25, Y+2	; 0x02
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	f1 f7       	brne	.-4      	; 0x27cc <LCD_voidInit+0x4ea>
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);     //TIMER0_voidSetBusyWait_ms(1);


}
    27d4:	ca 5b       	subi	r28, 0xBA	; 186
    27d6:	df 4f       	sbci	r29, 0xFF	; 255
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	08 95       	ret

000027ec <LCD_voidWriteCommand>:


void LCD_voidWriteCommand ( u8 Copy_u8Command )
{
    27ec:	df 93       	push	r29
    27ee:	cf 93       	push	r28
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	2f 97       	sbiw	r28, 0x0f	; 15
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	8f 87       	std	Y+15, r24	; 0x0f
    /* RS=0 because we send a Command not Data */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,DIO_LOW);
    2802:	83 e0       	ldi	r24, 0x03	; 3
    2804:	60 e0       	ldi	r22, 0x00	; 0
    2806:	40 e0       	ldi	r20, 0x00	; 0
    2808:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>

    /* RW=0 because we Write a Command not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,DIO_LOW);
    280c:	83 e0       	ldi	r24, 0x03	; 3
    280e:	61 e0       	ldi	r22, 0x01	; 1
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Command);
    2816:	82 e0       	ldi	r24, 0x02	; 2
    2818:	6f 85       	ldd	r22, Y+15	; 0x0f
    281a:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_HIGH);
    281e:	83 e0       	ldi	r24, 0x03	; 3
    2820:	62 e0       	ldi	r22, 0x02	; 2
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e0       	ldi	r26, 0x00	; 0
    282e:	b0 e4       	ldi	r27, 0x40	; 64
    2830:	8b 87       	std	Y+11, r24	; 0x0b
    2832:	9c 87       	std	Y+12, r25	; 0x0c
    2834:	ad 87       	std	Y+13, r26	; 0x0d
    2836:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6b 85       	ldd	r22, Y+11	; 0x0b
    283a:	7c 85       	ldd	r23, Y+12	; 0x0c
    283c:	8d 85       	ldd	r24, Y+13	; 0x0d
    283e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a ef       	ldi	r20, 0xFA	; 250
    2846:	54 e4       	ldi	r21, 0x44	; 68
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	8f 83       	std	Y+7, r24	; 0x07
    2852:	98 87       	std	Y+8, r25	; 0x08
    2854:	a9 87       	std	Y+9, r26	; 0x09
    2856:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2858:	6f 81       	ldd	r22, Y+7	; 0x07
    285a:	78 85       	ldd	r23, Y+8	; 0x08
    285c:	89 85       	ldd	r24, Y+9	; 0x09
    285e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <LCD_voidWriteCommand+0x8e>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	9e 83       	std	Y+6, r25	; 0x06
    2876:	8d 83       	std	Y+5, r24	; 0x05
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <LCD_voidWriteCommand+0x10c>
	else if (__tmp > 65535)
    287a:	6f 81       	ldd	r22, Y+7	; 0x07
    287c:	78 85       	ldd	r23, Y+8	; 0x08
    287e:	89 85       	ldd	r24, Y+9	; 0x09
    2880:	9a 85       	ldd	r25, Y+10	; 0x0a
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <LCD_voidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6b 85       	ldd	r22, Y+11	; 0x0b
    2894:	7c 85       	ldd	r23, Y+12	; 0x0c
    2896:	8d 85       	ldd	r24, Y+13	; 0x0d
    2898:	9e 85       	ldd	r25, Y+14	; 0x0e
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <LCD_voidWriteCommand+0xee>
    28bc:	88 ec       	ldi	r24, 0xC8	; 200
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_voidWriteCommand+0xdc>
    28cc:	9c 83       	std	Y+4, r25	; 0x04
    28ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	9e 83       	std	Y+6, r25	; 0x06
    28d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	8d 81       	ldd	r24, Y+5	; 0x05
    28dc:	9e 81       	ldd	r25, Y+6	; 0x06
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <LCD_voidWriteCommand+0xd0>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <LCD_voidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	6f 81       	ldd	r22, Y+7	; 0x07
    28e6:	78 85       	ldd	r23, Y+8	; 0x08
    28e8:	89 85       	ldd	r24, Y+9	; 0x09
    28ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	9e 83       	std	Y+6, r25	; 0x06
    28f6:	8d 83       	std	Y+5, r24	; 0x05
    28f8:	8d 81       	ldd	r24, Y+5	; 0x05
    28fa:	9e 81       	ldd	r25, Y+6	; 0x06
    28fc:	9a 83       	std	Y+2, r25	; 0x02
    28fe:	89 83       	std	Y+1, r24	; 0x01
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_voidWriteCommand+0x118>
    2908:	9a 83       	std	Y+2, r25	; 0x02
    290a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_LOW);
    290c:	83 e0       	ldi	r24, 0x03	; 3
    290e:	62 e0       	ldi	r22, 0x02	; 2
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
}
    2916:	2f 96       	adiw	r28, 0x0f	; 15
    2918:	0f b6       	in	r0, 0x3f	; 63
    291a:	f8 94       	cli
    291c:	de bf       	out	0x3e, r29	; 62
    291e:	0f be       	out	0x3f, r0	; 63
    2920:	cd bf       	out	0x3d, r28	; 61
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <LCD_voidWriteChar>:


void LCD_voidWriteChar ( u8 Copy_u8Char )
{
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	cd b7       	in	r28, 0x3d	; 61
    292e:	de b7       	in	r29, 0x3e	; 62
    2930:	2f 97       	sbiw	r28, 0x0f	; 15
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
    293c:	8f 87       	std	Y+15, r24	; 0x0f
    /* RS=1 because we send a Data not Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RS_PIN,DIO_HIGH);
    293e:	83 e0       	ldi	r24, 0x03	; 3
    2940:	60 e0       	ldi	r22, 0x00	; 0
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>

    /* RW=0 because we Write a Data not Read */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,RW_PIN,DIO_LOW);
    2948:	83 e0       	ldi	r24, 0x03	; 3
    294a:	61 e0       	ldi	r22, 0x01	; 1
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>

    /* Send Data bits from MC PINS to LCD Data PINS */
    DIO_voidSetPortValue(LCD_DATA_PORT,Copy_u8Char);
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	6f 85       	ldd	r22, Y+15	; 0x0f
    2956:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidSetPortValue>

    /* Falling Edge on E PIN to make LCD Read This Command */
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_HIGH);
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	62 e0       	ldi	r22, 0x02	; 2
    295e:	41 e0       	ldi	r20, 0x01	; 1
    2960:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 e8       	ldi	r26, 0x80	; 128
    296a:	bf e3       	ldi	r27, 0x3F	; 63
    296c:	8b 87       	std	Y+11, r24	; 0x0b
    296e:	9c 87       	std	Y+12, r25	; 0x0c
    2970:	ad 87       	std	Y+13, r26	; 0x0d
    2972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a ef       	ldi	r20, 0xFA	; 250
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8f 83       	std	Y+7, r24	; 0x07
    298e:	98 87       	std	Y+8, r25	; 0x08
    2990:	a9 87       	std	Y+9, r26	; 0x09
    2992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <LCD_voidWriteChar+0x8e>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <LCD_voidWriteChar+0x10c>
	else if (__tmp > 65535)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <LCD_voidWriteChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <LCD_voidWriteChar+0xee>
    29f8:	88 ec       	ldi	r24, 0xC8	; 200
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_voidWriteChar+0xdc>
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <LCD_voidWriteChar+0xd0>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <LCD_voidWriteChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <LCD_voidWriteChar+0x118>
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
    DIO_voidSetPinValue (LCD_CONTROL_PORT,E_PIN,DIO_LOW);
    2a48:	83 e0       	ldi	r24, 0x03	; 3
    2a4a:	62 e0       	ldi	r22, 0x02	; 2
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
}
    2a52:	2f 96       	adiw	r28, 0x0f	; 15
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	cf 91       	pop	r28
    2a60:	df 91       	pop	r29
    2a62:	08 95       	ret

00002a64 <LCD_voidWriteString>:



void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	00 d0       	rcall	.+0      	; 0x2a6a <LCD_voidWriteString+0x6>
    2a6a:	0f 92       	push	r0
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
    2a70:	9b 83       	std	Y+3, r25	; 0x03
    2a72:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0 ;
    2a74:	19 82       	std	Y+1, r1	; 0x01
    2a76:	1d c0       	rjmp	.+58     	; 0x2ab2 <LCD_voidWriteString+0x4e>
    while (Copy_u8Arr[i] != '\0' )
    {
        LCD_voidWriteChar ( Copy_u8Arr[i] );
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	28 2f       	mov	r18, r24
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	fc 01       	movw	r30, r24
    2a84:	e2 0f       	add	r30, r18
    2a86:	f3 1f       	adc	r31, r19
    2a88:	80 81       	ld	r24, Z
    2a8a:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_voidWriteChar>
        i++;
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	8f 5f       	subi	r24, 0xFF	; 255
    2a92:	89 83       	std	Y+1, r24	; 0x01
        if(i==16)
    2a94:	89 81       	ldd	r24, Y+1	; 0x01
    2a96:	80 31       	cpi	r24, 0x10	; 16
    2a98:	29 f4       	brne	.+10     	; 0x2aa4 <LCD_voidWriteString+0x40>
        {
        	LCD_voidGoTo_XY(1,0);
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>
    2aa2:	07 c0       	rjmp	.+14     	; 0x2ab2 <LCD_voidWriteString+0x4e>
        }
        else if(i==32)
    2aa4:	89 81       	ldd	r24, Y+1	; 0x01
    2aa6:	80 32       	cpi	r24, 0x20	; 32
    2aa8:	21 f4       	brne	.+8      	; 0x2ab2 <LCD_voidWriteString+0x4e>
        {
        	LCD_voidGoTo_XY(0,0);
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	60 e0       	ldi	r22, 0x00	; 0
    2aae:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>


void LCD_voidWriteString (u8 *Copy_u8Arr )
{
    u8 i = 0 ;
    while (Copy_u8Arr[i] != '\0' )
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    2aba:	9b 81       	ldd	r25, Y+3	; 0x03
    2abc:	fc 01       	movw	r30, r24
    2abe:	e2 0f       	add	r30, r18
    2ac0:	f3 1f       	adc	r31, r19
    2ac2:	80 81       	ld	r24, Z
    2ac4:	88 23       	and	r24, r24
    2ac6:	c1 f6       	brne	.-80     	; 0x2a78 <LCD_voidWriteString+0x14>
        else if(i==32)
        {
        	LCD_voidGoTo_XY(0,0);
        }
    }
}
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	cf 91       	pop	r28
    2ad0:	df 91       	pop	r29
    2ad2:	08 95       	ret

00002ad4 <LCD_voidWrite_u32Number>:


void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	df 93       	push	r29
    2ada:	cf 93       	push	r28
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	af 97       	sbiw	r28, 0x2f	; 47
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	6c a7       	std	Y+44, r22	; 0x2c
    2aee:	7d a7       	std	Y+45, r23	; 0x2d
    2af0:	8e a7       	std	Y+46, r24	; 0x2e
    2af2:	9f a7       	std	Y+47, r25	; 0x2f
    u8 Arr[40] ;
    u8 i=0 ;
    2af4:	1b 82       	std	Y+3, r1	; 0x03
    2af6:	2d c0       	rjmp	.+90     	; 0x2b52 <LCD_voidWrite_u32Number+0x7e>
    while ( Copy_u32Number > 0 )
    {
        Arr[i] = Copy_u32Number % 10 ;
    2af8:	8b 81       	ldd	r24, Y+3	; 0x03
    2afa:	08 2f       	mov	r16, r24
    2afc:	10 e0       	ldi	r17, 0x00	; 0
    2afe:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b00:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b02:	ae a5       	ldd	r26, Y+46	; 0x2e
    2b04:	bf a5       	ldd	r27, Y+47	; 0x2f
    2b06:	2a e0       	ldi	r18, 0x0A	; 10
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e0       	ldi	r20, 0x00	; 0
    2b0c:	50 e0       	ldi	r21, 0x00	; 0
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <__udivmodsi4>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	ce 01       	movw	r24, r28
    2b1e:	04 96       	adiw	r24, 0x04	; 4
    2b20:	fc 01       	movw	r30, r24
    2b22:	e0 0f       	add	r30, r16
    2b24:	f1 1f       	adc	r31, r17
    2b26:	20 83       	st	Z, r18
        Copy_u32Number /= 10 ;
    2b28:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b2a:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b2c:	ae a5       	ldd	r26, Y+46	; 0x2e
    2b2e:	bf a5       	ldd	r27, Y+47	; 0x2f
    2b30:	2a e0       	ldi	r18, 0x0A	; 10
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	50 e0       	ldi	r21, 0x00	; 0
    2b38:	bc 01       	movw	r22, r24
    2b3a:	cd 01       	movw	r24, r26
    2b3c:	0e 94 96 17 	call	0x2f2c	; 0x2f2c <__udivmodsi4>
    2b40:	da 01       	movw	r26, r20
    2b42:	c9 01       	movw	r24, r18
    2b44:	8c a7       	std	Y+44, r24	; 0x2c
    2b46:	9d a7       	std	Y+45, r25	; 0x2d
    2b48:	ae a7       	std	Y+46, r26	; 0x2e
    2b4a:	bf a7       	std	Y+47, r27	; 0x2f
        i++;
    2b4c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4e:	8f 5f       	subi	r24, 0xFF	; 255
    2b50:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidWrite_u32Number ( u32 Copy_u32Number)
{
    u8 Arr[40] ;
    u8 i=0 ;
    while ( Copy_u32Number > 0 )
    2b52:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b54:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b56:	ae a5       	ldd	r26, Y+46	; 0x2e
    2b58:	bf a5       	ldd	r27, Y+47	; 0x2f
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	a1 05       	cpc	r26, r1
    2b5e:	b1 05       	cpc	r27, r1
    2b60:	59 f6       	brne	.-106    	; 0x2af8 <LCD_voidWrite_u32Number+0x24>
    {
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    2b62:	8b 81       	ldd	r24, Y+3	; 0x03
    2b64:	81 50       	subi	r24, 0x01	; 1
    2b66:	8b 83       	std	Y+3, r24	; 0x03
    for( s16 j=i ; j>=0 ; j--)
    2b68:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6a:	88 2f       	mov	r24, r24
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	9a 83       	std	Y+2, r25	; 0x02
    2b70:	89 83       	std	Y+1, r24	; 0x01
    2b72:	10 c0       	rjmp	.+32     	; 0x2b94 <LCD_voidWrite_u32Number+0xc0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    2b74:	29 81       	ldd	r18, Y+1	; 0x01
    2b76:	3a 81       	ldd	r19, Y+2	; 0x02
    2b78:	ce 01       	movw	r24, r28
    2b7a:	04 96       	adiw	r24, 0x04	; 4
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	e2 0f       	add	r30, r18
    2b80:	f3 1f       	adc	r31, r19
    2b82:	80 81       	ld	r24, Z
    2b84:	80 5d       	subi	r24, 0xD0	; 208
    2b86:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_voidWriteChar>
        Arr[i] = Copy_u32Number % 10 ;
        Copy_u32Number /= 10 ;
        i++;
    }
    i--;
    for( s16 j=i ; j>=0 ; j--)
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	9a 83       	std	Y+2, r25	; 0x02
    2b92:	89 83       	std	Y+1, r24	; 0x01
    2b94:	89 81       	ldd	r24, Y+1	; 0x01
    2b96:	9a 81       	ldd	r25, Y+2	; 0x02
    2b98:	99 23       	and	r25, r25
    2b9a:	64 f7       	brge	.-40     	; 0x2b74 <LCD_voidWrite_u32Number+0xa0>
    {
        LCD_voidWriteChar ( Arr[j] + '0' );
    }
}
    2b9c:	af 96       	adiw	r28, 0x2f	; 47
    2b9e:	0f b6       	in	r0, 0x3f	; 63
    2ba0:	f8 94       	cli
    2ba2:	de bf       	out	0x3e, r29	; 62
    2ba4:	0f be       	out	0x3f, r0	; 63
    2ba6:	cd bf       	out	0x3d, r28	; 61
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	08 95       	ret

00002bb2 <LCD_voidGoTo_XY>:


void LCD_voidGoTo_XY ( u8 Copy_u8Line , u8 Copy_u8Position )
{
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <LCD_voidGoTo_XY+0x6>
    2bb8:	00 d0       	rcall	.+0      	; 0x2bba <LCD_voidGoTo_XY+0x8>
    2bba:	cd b7       	in	r28, 0x3d	; 61
    2bbc:	de b7       	in	r29, 0x3e	; 62
    2bbe:	89 83       	std	Y+1, r24	; 0x01
    2bc0:	6a 83       	std	Y+2, r22	; 0x02
    /* i/p validation */
    if ( Copy_u8Line > LINE_2 || Copy_u8Position > 15 )
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	82 30       	cpi	r24, 0x02	; 2
    2bc6:	d8 f4       	brcc	.+54     	; 0x2bfe <LCD_voidGoTo_XY+0x4c>
    2bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bca:	80 31       	cpi	r24, 0x10	; 16
    2bcc:	c0 f4       	brcc	.+48     	; 0x2bfe <LCD_voidGoTo_XY+0x4c>
    {
        // Do Nothing
    }
    else
    {
        switch(Copy_u8Line)
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	3c 83       	std	Y+4, r19	; 0x04
    2bd6:	2b 83       	std	Y+3, r18	; 0x03
    2bd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bda:	9c 81       	ldd	r25, Y+4	; 0x04
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	31 f0       	breq	.+12     	; 0x2bec <LCD_voidGoTo_XY+0x3a>
    2be0:	2b 81       	ldd	r18, Y+3	; 0x03
    2be2:	3c 81       	ldd	r19, Y+4	; 0x04
    2be4:	21 30       	cpi	r18, 0x01	; 1
    2be6:	31 05       	cpc	r19, r1
    2be8:	31 f0       	breq	.+12     	; 0x2bf6 <LCD_voidGoTo_XY+0x44>
    2bea:	09 c0       	rjmp	.+18     	; 0x2bfe <LCD_voidGoTo_XY+0x4c>
        {
            case LINE_1 :    LCD_voidWriteCommand ( 0x80 + Copy_u8Position );      break;  //First position at Line_1 is 0x80 Address at DDRAM
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	80 58       	subi	r24, 0x80	; 128
    2bf0:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidWriteCommand>
    2bf4:	04 c0       	rjmp	.+8      	; 0x2bfe <LCD_voidGoTo_XY+0x4c>
            case LINE_2 :    LCD_voidWriteCommand ( 0xC0 + Copy_u8Position );      break;  //First position at Line_2 is 0xC0 Address at DDRAM
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	80 54       	subi	r24, 0x40	; 64
    2bfa:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidWriteCommand>
            default     :                                                          break;
        }        
    }
}
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <LCD_voidDrawPattern>:



void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <LCD_voidDrawPattern+0x6>
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <LCD_voidDrawPattern+0x8>
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	8a 83       	std	Y+2, r24	; 0x02
    2c1a:	7c 83       	std	Y+4, r23	; 0x04
    2c1c:	6b 83       	std	Y+3, r22	; 0x03
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );
    2c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c20:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidWriteCommand>

    for ( u8 i=0 ; i < 8 ; i++ )
    2c24:	19 82       	std	Y+1, r1	; 0x01
    2c26:	0e c0       	rjmp	.+28     	; 0x2c44 <LCD_voidDrawPattern+0x38>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c30:	9c 81       	ldd	r25, Y+4	; 0x04
    2c32:	fc 01       	movw	r30, r24
    2c34:	e2 0f       	add	r30, r18
    2c36:	f3 1f       	adc	r31, r19
    2c38:	80 81       	ld	r24, Z
    2c3a:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_voidWriteChar>

void LCD_voidDrawPattern ( u8 Copy_u8Pattern_Number , u8 *Copy_u8Arr_Pattern )
{
    LCD_voidWriteCommand ( Copy_u8Pattern_Number );

    for ( u8 i=0 ; i < 8 ; i++ )
    2c3e:	89 81       	ldd	r24, Y+1	; 0x01
    2c40:	8f 5f       	subi	r24, 0xFF	; 255
    2c42:	89 83       	std	Y+1, r24	; 0x01
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	88 30       	cpi	r24, 0x08	; 8
    2c48:	78 f3       	brcs	.-34     	; 0x2c28 <LCD_voidDrawPattern+0x1c>
    {
        LCD_voidWriteChar ( Copy_u8Arr_Pattern[i] );
    }
}
    2c4a:	0f 90       	pop	r0
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <LCD_voidWritePattern>:




void LCD_voidWritePattern ( u8 Copy_u8Pattern , u8 Copy_u8Line , u8 Copy_u8Position )
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	00 d0       	rcall	.+0      	; 0x2c5e <LCD_voidWritePattern+0x6>
    2c5e:	0f 92       	push	r0
    2c60:	cd b7       	in	r28, 0x3d	; 61
    2c62:	de b7       	in	r29, 0x3e	; 62
    2c64:	89 83       	std	Y+1, r24	; 0x01
    2c66:	6a 83       	std	Y+2, r22	; 0x02
    2c68:	4b 83       	std	Y+3, r20	; 0x03
    LCD_voidGoTo_XY ( Copy_u8Line , Copy_u8Position );
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	6b 81       	ldd	r22, Y+3	; 0x03
    2c6e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>
    LCD_voidWriteChar ( Copy_u8Pattern );
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	0e 94 94 14 	call	0x2928	; 0x2928 <LCD_voidWriteChar>
}
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	cf 91       	pop	r28
    2c80:	df 91       	pop	r29
    2c82:	08 95       	ret

00002c84 <LCD_voidClearDisplay>:




void LCD_voidClearDisplay (void)
{
    2c84:	df 93       	push	r29
    2c86:	cf 93       	push	r28
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( DIS_CLEAR );
    2c8c:	81 e0       	ldi	r24, 0x01	; 1
    2c8e:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidWriteCommand>
    LCD_voidGoTo_XY(0,0);
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	60 e0       	ldi	r22, 0x00	; 0
    2c96:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>
}
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <LCD_voidShiftLeft>:




void LCD_voidShiftLeft (void)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_INCREASE_LEFT_SHIFT );
    2ca8:	87 e0       	ldi	r24, 0x07	; 7
    2caa:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidWriteCommand>
}
    2cae:	cf 91       	pop	r28
    2cb0:	df 91       	pop	r29
    2cb2:	08 95       	ret

00002cb4 <LCD_voidShiftRight>:




void LCD_voidShiftRight (void)
{
    2cb4:	df 93       	push	r29
    2cb6:	cf 93       	push	r28
    2cb8:	cd b7       	in	r28, 0x3d	; 61
    2cba:	de b7       	in	r29, 0x3e	; 62
    LCD_voidWriteCommand ( ENTRY_MODE_DECREASE_RIGHT_SHIFT );
    2cbc:	85 e0       	ldi	r24, 0x05	; 5
    2cbe:	0e 94 f6 13 	call	0x27ec	; 0x27ec <LCD_voidWriteCommand>
}
    2cc2:	cf 91       	pop	r28
    2cc4:	df 91       	pop	r29
    2cc6:	08 95       	ret

00002cc8 <main>:



u16 Temp_Value;
void main()
{
    2cc8:	df 93       	push	r29
    2cca:	cf 93       	push	r28
    2ccc:	cd b7       	in	r28, 0x3d	; 61
    2cce:	de b7       	in	r29, 0x3e	; 62

	ADC_voidInit();
    2cd0:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <ADC_voidInit>
	LCD_voidInit();
    2cd4:	0e 94 71 11 	call	0x22e2	; 0x22e2 <LCD_voidInit>
	TIMER1_voidInit();
    2cd8:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER1_voidInit>
	DIO_voidSetPortDirection(DIO_PORTB,DIO_OUTPUT);
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	61 e0       	ldi	r22, 0x01	; 1
    2ce0:	0e 94 ae 0a 	call	0x155c	; 0x155c <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN1,DIO_OUTPUT);
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	61 e0       	ldi	r22, 0x01	; 1
    2ce8:	41 e0       	ldi	r20, 0x01	; 1
    2cea:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN2,DIO_OUTPUT);
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	62 e0       	ldi	r22, 0x02	; 2
    2cf2:	41 e0       	ldi	r20, 0x01	; 1
    2cf4:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN3,DIO_OUTPUT);
    2cf8:	80 e0       	ldi	r24, 0x00	; 0
    2cfa:	63 e0       	ldi	r22, 0x03	; 3
    2cfc:	41 e0       	ldi	r20, 0x01	; 1
    2cfe:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN4,DIO_OUTPUT);
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	64 e0       	ldi	r22, 0x04	; 4
    2d06:	41 e0       	ldi	r20, 0x01	; 1
    2d08:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTB,DIO_PIN6,DIO_OUTPUT);
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	66 e0       	ldi	r22, 0x06	; 6
    2d10:	41 e0       	ldi	r20, 0x01	; 1
    2d12:	0e 94 9e 09 	call	0x133c	; 0x133c <DIO_voidSetPinDirection>

	while(1)
	{

		LCD_voidGoTo_XY(0,0);
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	60 e0       	ldi	r22, 0x00	; 0
    2d1a:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>
		LCD_voidWriteString("Temperature:");
    2d1e:	80 e6       	ldi	r24, 0x60	; 96
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_voidWriteString>
		Temp_Value = Temp_u8GetReading(ADC0) ;
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	0e 94 32 11 	call	0x2264	; 0x2264 <Temp_u8GetReading>
    2d2c:	90 93 a0 00 	sts	0x00A0, r25
    2d30:	80 93 9f 00 	sts	0x009F, r24


		if(Temp_Value>=20 &&Temp_Value<26)
    2d34:	80 91 9f 00 	lds	r24, 0x009F
    2d38:	90 91 a0 00 	lds	r25, 0x00A0
    2d3c:	84 31       	cpi	r24, 0x14	; 20
    2d3e:	91 05       	cpc	r25, r1
    2d40:	08 f4       	brcc	.+2      	; 0x2d44 <main+0x7c>
    2d42:	40 c0       	rjmp	.+128    	; 0x2dc4 <main+0xfc>
    2d44:	80 91 9f 00 	lds	r24, 0x009F
    2d48:	90 91 a0 00 	lds	r25, 0x00A0
    2d4c:	8a 31       	cpi	r24, 0x1A	; 26
    2d4e:	91 05       	cpc	r25, r1
    2d50:	c8 f5       	brcc	.+114    	; 0x2dc4 <main+0xfc>
		{
			LCD_voidGoTo_XY(0,13);
    2d52:	80 e0       	ldi	r24, 0x00	; 0
    2d54:	6d e0       	ldi	r22, 0x0D	; 13
    2d56:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>
			DIO_voidSetPortValue(DIO_PORTB,0X00);
    2d5a:	81 e0       	ldi	r24, 0x01	; 1
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidSetPortValue>
			LCD_voidWrite_u32Number(Temp_Value);
    2d62:	80 91 9f 00 	lds	r24, 0x009F
    2d66:	90 91 a0 00 	lds	r25, 0x00A0
    2d6a:	cc 01       	movw	r24, r24
    2d6c:	a0 e0       	ldi	r26, 0x00	; 0
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	bc 01       	movw	r22, r24
    2d72:	cd 01       	movw	r24, r26
    2d74:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidWrite_u32Number>
			LCD_voidGoTo_XY(1,5);
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	65 e0       	ldi	r22, 0x05	; 5
    2d7c:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>
			LCD_voidWriteString("Nice ");
    2d80:	8d e6       	ldi	r24, 0x6D	; 109
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_voidWriteString>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN2,DIO_HIGH);
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	62 e0       	ldi	r22, 0x02	; 2
    2d8c:	41 e0       	ldi	r20, 0x01	; 1
    2d8e:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN4,DIO_HIGH);
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	64 e0       	ldi	r22, 0x04	; 4
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN1,DIO_LOW);
    2d9c:	80 e0       	ldi	r24, 0x00	; 0
    2d9e:	61 e0       	ldi	r22, 0x01	; 1
    2da0:	40 e0       	ldi	r20, 0x00	; 0
    2da2:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN3,DIO_LOW);
    2da6:	80 e0       	ldi	r24, 0x00	; 0
    2da8:	63 e0       	ldi	r22, 0x03	; 3
    2daa:	40 e0       	ldi	r20, 0x00	; 0
    2dac:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTB,DIO_PIN6,DIO_LOW);
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	66 e0       	ldi	r22, 0x06	; 6
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			SERVO_voidRotateSpecificAngle_OC1A(0);
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	0e 94 b6 10 	call	0x216c	; 0x216c <SERVO_voidRotateSpecificAngle_OC1A>
    2dc2:	a9 cf       	rjmp	.-174    	; 0x2d16 <main+0x4e>

		}
		else if(Temp_Value<20)
    2dc4:	80 91 9f 00 	lds	r24, 0x009F
    2dc8:	90 91 a0 00 	lds	r25, 0x00A0
    2dcc:	84 31       	cpi	r24, 0x14	; 20
    2dce:	91 05       	cpc	r25, r1
    2dd0:	c8 f5       	brcc	.+114    	; 0x2e44 <main+0x17c>
		{

			LCD_voidGoTo_XY(0,13);
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	6d e0       	ldi	r22, 0x0D	; 13
    2dd6:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>
			DIO_voidSetPortValue(DIO_PORTB,0X00);
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidSetPortValue>
			LCD_voidWrite_u32Number(Temp_Value);
    2de2:	80 91 9f 00 	lds	r24, 0x009F
    2de6:	90 91 a0 00 	lds	r25, 0x00A0
    2dea:	cc 01       	movw	r24, r24
    2dec:	a0 e0       	ldi	r26, 0x00	; 0
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidWrite_u32Number>
			LCD_voidGoTo_XY(1,5);
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	65 e0       	ldi	r22, 0x05	; 5
    2dfc:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>
			LCD_voidWriteString("Cold ");
    2e00:	83 e7       	ldi	r24, 0x73	; 115
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_voidWriteString>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN1,DIO_HIGH);
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	61 e0       	ldi	r22, 0x01	; 1
    2e0c:	41 e0       	ldi	r20, 0x01	; 1
    2e0e:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN2,DIO_LOW);
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN3,DIO_LOW);
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	63 e0       	ldi	r22, 0x03	; 3
    2e20:	40 e0       	ldi	r20, 0x00	; 0
    2e22:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN4,DIO_LOW);
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	64 e0       	ldi	r22, 0x04	; 4
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTB,DIO_PIN6,DIO_HIGH);
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	66 e0       	ldi	r22, 0x06	; 6
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			SERVO_voidRotateSpecificAngle_OC1A(90);
    2e3a:	8a e5       	ldi	r24, 0x5A	; 90
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	0e 94 b6 10 	call	0x216c	; 0x216c <SERVO_voidRotateSpecificAngle_OC1A>
    2e42:	69 cf       	rjmp	.-302    	; 0x2d16 <main+0x4e>
		}
		else if(Temp_Value>=26)
    2e44:	80 91 9f 00 	lds	r24, 0x009F
    2e48:	90 91 a0 00 	lds	r25, 0x00A0
    2e4c:	8a 31       	cpi	r24, 0x1A	; 26
    2e4e:	91 05       	cpc	r25, r1
    2e50:	08 f4       	brcc	.+2      	; 0x2e54 <main+0x18c>
    2e52:	61 cf       	rjmp	.-318    	; 0x2d16 <main+0x4e>
		{
			LCD_voidGoTo_XY(0,13);
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	6d e0       	ldi	r22, 0x0D	; 13
    2e58:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>
			LCD_voidWrite_u32Number(Temp_Value);
    2e5c:	80 91 9f 00 	lds	r24, 0x009F
    2e60:	90 91 a0 00 	lds	r25, 0x00A0
    2e64:	cc 01       	movw	r24, r24
    2e66:	a0 e0       	ldi	r26, 0x00	; 0
    2e68:	b0 e0       	ldi	r27, 0x00	; 0
    2e6a:	bc 01       	movw	r22, r24
    2e6c:	cd 01       	movw	r24, r26
    2e6e:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <LCD_voidWrite_u32Number>
			DIO_voidSetPortValue(DIO_PORTB,0X3F);
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	6f e3       	ldi	r22, 0x3F	; 63
    2e76:	0e 94 47 0c 	call	0x188e	; 0x188e <DIO_voidSetPortValue>
			LCD_voidGoTo_XY(1,5);
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	65 e0       	ldi	r22, 0x05	; 5
    2e7e:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <LCD_voidGoTo_XY>
			LCD_voidWriteString("HOT  ");
    2e82:	89 e7       	ldi	r24, 0x79	; 121
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 32 15 	call	0x2a64	; 0x2a64 <LCD_voidWriteString>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN3,DIO_HIGH);
    2e8a:	80 e0       	ldi	r24, 0x00	; 0
    2e8c:	63 e0       	ldi	r22, 0x03	; 3
    2e8e:	41 e0       	ldi	r20, 0x01	; 1
    2e90:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN2,DIO_LOW);
    2e94:	80 e0       	ldi	r24, 0x00	; 0
    2e96:	62 e0       	ldi	r22, 0x02	; 2
    2e98:	40 e0       	ldi	r20, 0x00	; 0
    2e9a:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN1,DIO_LOW);
    2e9e:	80 e0       	ldi	r24, 0x00	; 0
    2ea0:	61 e0       	ldi	r22, 0x01	; 1
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTB,DIO_PIN6,DIO_LOW);
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	66 e0       	ldi	r22, 0x06	; 6
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			DIO_voidSetPinValue(DIO_PORTA,DIO_PIN4,DIO_LOW);
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	64 e0       	ldi	r22, 0x04	; 4
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_voidSetPinValue>
			SERVO_voidRotateSpecificAngle_OC1A(90);
    2ebc:	8a e5       	ldi	r24, 0x5A	; 90
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 b6 10 	call	0x216c	; 0x216c <SERVO_voidRotateSpecificAngle_OC1A>
    2ec4:	28 cf       	rjmp	.-432    	; 0x2d16 <main+0x4e>

00002ec6 <__mulsi3>:
    2ec6:	62 9f       	mul	r22, r18
    2ec8:	d0 01       	movw	r26, r0
    2eca:	73 9f       	mul	r23, r19
    2ecc:	f0 01       	movw	r30, r0
    2ece:	82 9f       	mul	r24, r18
    2ed0:	e0 0d       	add	r30, r0
    2ed2:	f1 1d       	adc	r31, r1
    2ed4:	64 9f       	mul	r22, r20
    2ed6:	e0 0d       	add	r30, r0
    2ed8:	f1 1d       	adc	r31, r1
    2eda:	92 9f       	mul	r25, r18
    2edc:	f0 0d       	add	r31, r0
    2ede:	83 9f       	mul	r24, r19
    2ee0:	f0 0d       	add	r31, r0
    2ee2:	74 9f       	mul	r23, r20
    2ee4:	f0 0d       	add	r31, r0
    2ee6:	65 9f       	mul	r22, r21
    2ee8:	f0 0d       	add	r31, r0
    2eea:	99 27       	eor	r25, r25
    2eec:	72 9f       	mul	r23, r18
    2eee:	b0 0d       	add	r27, r0
    2ef0:	e1 1d       	adc	r30, r1
    2ef2:	f9 1f       	adc	r31, r25
    2ef4:	63 9f       	mul	r22, r19
    2ef6:	b0 0d       	add	r27, r0
    2ef8:	e1 1d       	adc	r30, r1
    2efa:	f9 1f       	adc	r31, r25
    2efc:	bd 01       	movw	r22, r26
    2efe:	cf 01       	movw	r24, r30
    2f00:	11 24       	eor	r1, r1
    2f02:	08 95       	ret

00002f04 <__udivmodhi4>:
    2f04:	aa 1b       	sub	r26, r26
    2f06:	bb 1b       	sub	r27, r27
    2f08:	51 e1       	ldi	r21, 0x11	; 17
    2f0a:	07 c0       	rjmp	.+14     	; 0x2f1a <__udivmodhi4_ep>

00002f0c <__udivmodhi4_loop>:
    2f0c:	aa 1f       	adc	r26, r26
    2f0e:	bb 1f       	adc	r27, r27
    2f10:	a6 17       	cp	r26, r22
    2f12:	b7 07       	cpc	r27, r23
    2f14:	10 f0       	brcs	.+4      	; 0x2f1a <__udivmodhi4_ep>
    2f16:	a6 1b       	sub	r26, r22
    2f18:	b7 0b       	sbc	r27, r23

00002f1a <__udivmodhi4_ep>:
    2f1a:	88 1f       	adc	r24, r24
    2f1c:	99 1f       	adc	r25, r25
    2f1e:	5a 95       	dec	r21
    2f20:	a9 f7       	brne	.-22     	; 0x2f0c <__udivmodhi4_loop>
    2f22:	80 95       	com	r24
    2f24:	90 95       	com	r25
    2f26:	bc 01       	movw	r22, r24
    2f28:	cd 01       	movw	r24, r26
    2f2a:	08 95       	ret

00002f2c <__udivmodsi4>:
    2f2c:	a1 e2       	ldi	r26, 0x21	; 33
    2f2e:	1a 2e       	mov	r1, r26
    2f30:	aa 1b       	sub	r26, r26
    2f32:	bb 1b       	sub	r27, r27
    2f34:	fd 01       	movw	r30, r26
    2f36:	0d c0       	rjmp	.+26     	; 0x2f52 <__udivmodsi4_ep>

00002f38 <__udivmodsi4_loop>:
    2f38:	aa 1f       	adc	r26, r26
    2f3a:	bb 1f       	adc	r27, r27
    2f3c:	ee 1f       	adc	r30, r30
    2f3e:	ff 1f       	adc	r31, r31
    2f40:	a2 17       	cp	r26, r18
    2f42:	b3 07       	cpc	r27, r19
    2f44:	e4 07       	cpc	r30, r20
    2f46:	f5 07       	cpc	r31, r21
    2f48:	20 f0       	brcs	.+8      	; 0x2f52 <__udivmodsi4_ep>
    2f4a:	a2 1b       	sub	r26, r18
    2f4c:	b3 0b       	sbc	r27, r19
    2f4e:	e4 0b       	sbc	r30, r20
    2f50:	f5 0b       	sbc	r31, r21

00002f52 <__udivmodsi4_ep>:
    2f52:	66 1f       	adc	r22, r22
    2f54:	77 1f       	adc	r23, r23
    2f56:	88 1f       	adc	r24, r24
    2f58:	99 1f       	adc	r25, r25
    2f5a:	1a 94       	dec	r1
    2f5c:	69 f7       	brne	.-38     	; 0x2f38 <__udivmodsi4_loop>
    2f5e:	60 95       	com	r22
    2f60:	70 95       	com	r23
    2f62:	80 95       	com	r24
    2f64:	90 95       	com	r25
    2f66:	9b 01       	movw	r18, r22
    2f68:	ac 01       	movw	r20, r24
    2f6a:	bd 01       	movw	r22, r26
    2f6c:	cf 01       	movw	r24, r30
    2f6e:	08 95       	ret

00002f70 <__prologue_saves__>:
    2f70:	2f 92       	push	r2
    2f72:	3f 92       	push	r3
    2f74:	4f 92       	push	r4
    2f76:	5f 92       	push	r5
    2f78:	6f 92       	push	r6
    2f7a:	7f 92       	push	r7
    2f7c:	8f 92       	push	r8
    2f7e:	9f 92       	push	r9
    2f80:	af 92       	push	r10
    2f82:	bf 92       	push	r11
    2f84:	cf 92       	push	r12
    2f86:	df 92       	push	r13
    2f88:	ef 92       	push	r14
    2f8a:	ff 92       	push	r15
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	cf 93       	push	r28
    2f92:	df 93       	push	r29
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	ca 1b       	sub	r28, r26
    2f9a:	db 0b       	sbc	r29, r27
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	de bf       	out	0x3e, r29	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	cd bf       	out	0x3d, r28	; 61
    2fa6:	09 94       	ijmp

00002fa8 <__epilogue_restores__>:
    2fa8:	2a 88       	ldd	r2, Y+18	; 0x12
    2faa:	39 88       	ldd	r3, Y+17	; 0x11
    2fac:	48 88       	ldd	r4, Y+16	; 0x10
    2fae:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fb0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fb2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fb4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fb6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fb8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fba:	b9 84       	ldd	r11, Y+9	; 0x09
    2fbc:	c8 84       	ldd	r12, Y+8	; 0x08
    2fbe:	df 80       	ldd	r13, Y+7	; 0x07
    2fc0:	ee 80       	ldd	r14, Y+6	; 0x06
    2fc2:	fd 80       	ldd	r15, Y+5	; 0x05
    2fc4:	0c 81       	ldd	r16, Y+4	; 0x04
    2fc6:	1b 81       	ldd	r17, Y+3	; 0x03
    2fc8:	aa 81       	ldd	r26, Y+2	; 0x02
    2fca:	b9 81       	ldd	r27, Y+1	; 0x01
    2fcc:	ce 0f       	add	r28, r30
    2fce:	d1 1d       	adc	r29, r1
    2fd0:	0f b6       	in	r0, 0x3f	; 63
    2fd2:	f8 94       	cli
    2fd4:	de bf       	out	0x3e, r29	; 62
    2fd6:	0f be       	out	0x3f, r0	; 63
    2fd8:	cd bf       	out	0x3d, r28	; 61
    2fda:	ed 01       	movw	r28, r26
    2fdc:	08 95       	ret

00002fde <_exit>:
    2fde:	f8 94       	cli

00002fe0 <__stop_program>:
    2fe0:	ff cf       	rjmp	.-2      	; 0x2fe0 <__stop_program>
